수치해석
  이분법  
    종료판정
      횟수반복: 이분법을 x번 반복한다. 오차 = |hi - lo|/(2^(x+1))
        장점: 조건 단순, 무한루프X, 수행시간 예측 용이, 숫자가 크든 작든 문제 없음 
      절대오차: hi와 lo의 차이가 특정 값 이하 (허용 오차가 x라면, |hi-lo|>x 를 조건을 두면 된다.)
        문제점: 다루는 값의 크기가 크다면 문제가 될 수 있다. 부동소수점의 경우 숫자가 크다면 표현 간격이 넓어진다(듬성듬성).
      상대오차: 상대오차 x - (1-x)*hi<avg(lo+hi)<(1+x)*lo (단, lo와 hi는 양수)
        문제점: lo와 hi의 부호가 다르거나, 둘 다 음수일 경우 등을 고려하려면 코드가 복잡해진다. 
    반복문 불변식의 존재이유 -> 수학적 귀납법을 통한 알고리즘의 정당성 증명
      ex)f(x)=0인 x가 정답, 연속함수일경우, f(lo)<=0<f(hi) 라면 lo와 hi사이에 정답이 존재한다. 
    기타
      0(정답) 부분을 따로 처리할 필요는 없다.
      (lo+h1)/2를 정답으로 간주한다.

여러가지 유형의 문제들의 해법
  기본적인 접근방법
    프로그래밍 기법은 정답이 아닌 도구임을 인식하자 (이분법으로 다변수 다항 방정식을 푸는 방법을 떠올려보자)
    추가바람 
  단변수 다항 방정식(변수가 x 하나인 다항 방정식, ax^2+bx+c)
    이분법(근사,한계 많음): 두 극점 사이에는 최대 하나의 근만이 있음, 2차이하 풀기가능, 재귀 
    여러 수치해석 알고리즘 