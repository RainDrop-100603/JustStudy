JavaScript tips
https://developer.mozilla.org/ko/docs/Web/JavaScript

JavaScript의 기본
  top to bottom
  자료형은 python과 유사한 면이 있다.
  semicolon의 사용, {}, 주석처리(//, /**/), camelCase 사용등 c++과 유사한 면이 있다.
  html의 유일한 frotend programming language (backend는 다른 옵션도 존재한다)
  js파일을 목적에 따라 분할하여 사용하면 좋다.(다른 프로그래밍 언어와 비슷하게 이용)
  body내부에서 가장 하단에 import하는것이 권장된다(마지막에 불러옴)
    html내부에서 코드를 작성할 수 있지만, js파일을 이용하는것이 권장된다.

JavaScript의 semicolon(";") 사용
  JavaScript에는 semicolon을 자동으로 붙여주는 ASI라는 기능이 존재한다.
    따라서 semicolon을 사용하지 않아도, ASI가 적절한 위치에 semicolon을 삽입한다.
    그러나 "적절한 위치"라는 것 때문에, semicolon을 사용하는 것에 대한 찬반이 나뉜다.
  결론
    우선은 semicolon을 사용하자. 
  찬성
    ASI의 기능을 유추하기 어렵기 때문에 semicolon을 사용해야한다.
      의문점: semicolon을 사용하면 ASI가 작동하지 않는가? 즉 semicolon사용 유무와 관계없이 ASI를 신경써야 하는것인가
    https://okky.kr/article/448378
      semicolon을 사용하지 않으면 비직관적인 경우의 예시
    TC39(ECMA 인터내셔널의 ECMA 스크립트 담당 기술 위원회)에서는 향후에 언어가 확장되면서 발생할 수 있는 문제를 방지하기 위해서, 세미콜론을 넣는 스타일을 권장하는 듯하다.
  반대
    https://feross.org/never-use-semicolons/
    행의 시작을 [,(,' 으로 하지 앟는다면 문제가 생기지 않으며, 꼭 그렇게 해야할경우 semicolon으로 행을 시작하면 된다.
  참고
    https://bakyeono.net/post/2018-01-19-javascript-use-semicolon-or-not.html
    https://okky.kr/article/448378
    https://feross.org/never-use-semicolons/

JavaScript의 변수
  let var1 = "content" 와 같이 선언
  var, let, const가 존재
    ES6부터 let 과 const를 사용할 수 있게 되었다.
    var은 함수레벨 스코프, let과 const는 블럭 레벨 스코프 
    var로 선언한 변수는 선언전에 사용해도 에러가 나지 않지만(미선언 사용), let,const는 에러가 발생한다.
    const는 선언과 동시에 초기화 해야한다.
    const는 한번 할당한 값을 변경할 수 없지만, const object의 property가 바뀌는 것은 막지 못한다.
    var의 경우 버그발생과 메모리누수의 위험등이 있기 때문에 let, const 사용을 권장 
  자료형
    const선언되지 않았다면, 자료형 변형도 가능하다. ( ex: str -> bool)
    bool(true/false), int(123), float(1.346)
    undefined: Null과 유사 
    string  
      ""와 ''와 ``을 사용하며, ""와 ''는 python과 같이 문자열을 나타낸다.
      `` 과 ${}을 사용하여 다른 자료형과 혼합사용이 가능하다. (키보드에서 tab위에 있다)
        `Hello ${name} you are ${age} years`
      이모티콘은 string이다. (window + '.' or window + ';')
    array ( const arr1 = [var1, 2, 3.14, "text", true, obj1]; )
      python의 arr과 유사
      모든 자료형이 들어갈 수 있다.
      []을 통해 개별 원소에 접근한다.
    object (const obj1 = {property1:value1, property2:3, property3:var1}; )
      value에는 모든 자료형이 들어갈 수 있다.
      . 을 통해 각각의 property에 접근한다.
      const로 선언되어도 property에 접근하고 변경할 수 있다.
      함수를 내장할 수 있다. 
        property에는 함수의 이름, value에는 function(parameters){...}을 넣어준다.

JavaScript의 함수 생성
  function funcName(parameter){ ... } (내가하는 c++스타일처럼 ()와{ 가 붙어있게 하고 내용은 다음부분에 넣고, 마무리는 } 로)
  끝부분에 semicolon을 붙이지 않는다.
  object에 내장함수를 만들 수 있다(JavaScript의 변수 - object 참고)

JavaScript의 연산자
  https://developer.mozilla.org/ko/docs/Web/JavaScript/Guide/Expressions_and_Operators
  비교 연산자의 동작이 다른 언어와 다소 차이가 있다.
    비교 연산자의 자료형이 다르면, 적절하게 변환 후 비교한다
      3=="3": true, "12">3: true, "3"!=4: true
    엄격한 비교는 ===, !== 두가지가 있다. 연산자의 자료형을 변환하려고 시도하지 않는다.

console object: console에 정보를 출력
  log vs dir
    console.log(args): args를 출력. object, array를 포함한 모든 자료형 출력 가능. 각 arg는 공백으로 구분 
    console.dir(arg): arg 하나를 출력, 모든 자료형 출력 가능.
    https://developer.mozilla.org/ko/docs/Web/API/Console/log
    console.log는 요소를 HTML과 같은 트리 구조로 출력합니다.
    console.dir은 요소를 JSON과 같은 트리 구조로 출력합니다.

JavaScript with Html
  DOM object (Document Object Module): html을 다루는 object
    ele.querySelector: ele의 child에서 원하는 요소(#id,.class,tag)를 찾는다.  
    ele.classList: ele의 class를 다룬다. https://developer.mozilla.org/ko/docs/Web/API/Element/classList
    event: event 처리. https://developer.mozilla.org/ko/docs/Web/Events
    date: 시간을 불러옴


body=document.body: query로 찾을 필요 없다.
classList.erase(): 한번에 여러개를 지울 수 있다(더할 수도 있을 듯)
document: 전체 파일을 의미함 
HTMLElement.innerHtml: mozilla 검토 필요, 사용시 주의
  element의 모든 자손을 입력값으로 대체한다?
  HTMLElement.innerText, Node.textContent 와의 차이? https://developer.mozilla.org/ko/docs/Web/API/Node/textContent
  https://hianna.tistory.com/483
new Date(): 현재 시간을 불러옴 https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Date
  new Date로 불러온 data를 뺄셈연산 가능 
setInterval(func,x ms): x ms마다 func반복 실행 
localstorage: 여러 옵션을 local storage에 저장할 수 있다(이름, 국적, 24시간 표기 등등)4
event.preventDefault()
  event의 기본동작을 방지한다.(ex: form은 data를 보내고 새로고침한다)
eventlistner
  상시 대기하다가, event가 수행되면 실행된다. 즉 일반적인 top to down 실행과는 약간 다르다.
  또한 수행 됐다고 바로 없어지는것은 아닌듯(이건 왠지 설정 가능할듯 하다, 1회용 or 다중사용)
  load: load 이벤트는 리소스와 그것에 의존하는 리소스들의 로딩이 완료되면 실행됩니다.
input.value, input.placeholder등, HTMLElement.요소 는 attribute(placeholder)와, tag에 내장된 요소(value) 모두에 접근할 수 있는듯?
  JavaScript기본값으로 코딩되어있는듯, input object에 value, placeholder등이 있다고 생각하면 이해가 쉬울듯 
변수는 중복될 수 없고, 함수는 중복되도 되는가?(파일을 분할했을 때)
  다른파일에 있는 함수는 오버로드 되어도, 같은 파일에 있는걸 우선시 하는듯? 아니면 포함관계 때문일수도
    가정1: 함수명이 같은 함수는 오버로드 취급, 합쳐지기 전에는 오버로드된게 아니기 때문에 상관 x
          반면 변수명이 같은건 허용이 안되기 때문에, 같으면 안됨 
JSON.stringfy(object) <-> JSON.parse(string)
  object를 string처럼 바꿔준다(localstorage에 저장해주기 위함), array말고 다른것도 될수도? array도 object인가?  
  parse는 string을 다시 object로 바꿔줌

array.forEach(function(element){...}); : array의 각 element에 대해 function을 실행한다.
  array.forEach(funcName): array의 각 element를 전달인자로 넘겨서, funcName을 실행한다.

array.filter(func) : true/false를 반환하는 func를 통해, true를 반환하는 요소들로 구성된 array를 반환한다.

func를 바로 정의해서 사용할 수 있다(무명함수? 정도로 이해하자)
  object의 멤버함수, filter,forEach 에서의 함수 등등 여러 분야에 이용 가능 

parseInt(str) int로 바꾼다.

map vs object https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Map

id를 todo_1과 같이 중복되지 않도록 변경
중간에 있는 ele가 지워지면, id가 1, 3만 남게되면 어떻게 할지 생각 
  1: 2가 지워지면 3 이상의 것을 전부 다 바꿈
  2: 2가 지워져도 내버려 두고, 추가되는 것은 마지막 idx+1로 바꿈( 즉 4부터 추가)
  id가 1,3 과 같이 있으면, 새로운 것은 2가 추가되어야 하는가, 4가 되어야 하는가, todo_idx에서 idx를 어떻게 인식할 것인가? 
    인식이 어려우면 1: 의 방식이 더 낫다 

toDo를 Array가 아닌 map을 이용하여 구현할 수 있을까?
  object.entries 확인 

alert 경고메시지 

map to localstorage: https://intro0517.tistory.com/153
  Map -> String (Map to String): var str = JSON.stringify(Array.from( map.entries()));
  String -> Map (String to Map): var map = new Map(JSON.parse(str));

존재하는 변수를 불러올 때, 대체로 참조형으로 불러오는 듯 하다.

id를 정할 때, id: String(Date.now()) 와 같이 하면 중복 염려도 없고 좋다. 

HTMLElement.append(ele): ele를 HTMLElement의 마지막에 추가한다.
  HTMLElement.prepend(ele): ele를 맨앞에 추가한다.

navigator func
  geolocation: 날씨와 관련됨

obj{
  var1,
  var2
}
는 아래와 같다.
obj{
  var1:var1,
  var2:var2
}

then: 무언가가 실행된 후 실행?(weather.js참고)
https://openweathermap.org/ : 날씨데이터 불러오는 프리웨어