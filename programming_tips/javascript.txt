JavaScript tips
https://developer.mozilla.org/ko/docs/Web/JavaScript

JavaScript의 기본
  top to bottom
    그러나 모든 함수가 순차적으로 실행되는것은 아니다.
    JavaScript의 동작순서 참고
    https://doitnow-man.tistory.com/128
    https://engineering.huiseoul.com/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EB%8A%94-%EC%96%B4%EB%96%BB%EA%B2%8C-%EC%9E%91%EB%8F%99%ED%95%98%EB%8A%94%EA%B0%80-%EC%9D%B4%EB%B2%A4%ED%8A%B8-%EB%A3%A8%ED%94%84%EC%99%80-%EB%B9%84%EB%8F%99%EA%B8%B0-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EC%9D%98-%EB%B6%80%EC%83%81-async-await%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EC%BD%94%EB%94%A9-%ED%8C%81-%EB%8B%A4%EC%84%AF-%EA%B0%80%EC%A7%80-df65ffb4e7e
  언어적 특징
    let(var), const, array, object를 기본 자료형으로 가진다.
    semicolon의 사용, {}, 주석처리(//, /**/), camelCase 
    함수오버로딩 불가(마지막에 선언된것이 덮어씀)
  html의 유일한 frontend programming language (backend는 다른 옵션도 존재한다)
  body내부에서 가장 하단에 import하는것이 권장된다(마지막에 불러옴)
    html내부에서 코드를 작성할 수 있지만, js파일을 이용하는것이 권장된다.
  

JavaScript의 동작순서
  동기 이벤트와 비동기 이벤트를 잘 구분하여 실행순서를 고려해야 한다.
  비동기 이벤트: JS엔진에 정의되어 있지 않는 함수들을 가리키며, 이 함수들은 모두 비동기 방식 이벤트로 실행된다.
    addeventlistner가 대표적 
  동기 방식 이벤트 
    (1) JS(javascript)엔진이 javascript 코드 순차적으로 실행
    (2) code 실행 중 함수 발견 시 call stack에 넣기
    (3) call stack에 넣은 함수를 실행
    (4) call stack에서 실행된 함수를 call stack에 제거
  비동기 방식 이벤트
    (1) JS(javascript)엔진이 javascript 코드 순차적으로 실행
    (2) code 실행 중 비동기 이벤트 발견시 이벤트 함수를 call stack에 넣기
    (3) 비동기 이벤트 함수의 Event handler를 Event Queue에 넣기
        (이벤트 함수를 넣는 것이 아니다, 실제 이벤트 발생시 수행된는 함수를 넣는것)
    (4) call stack이 비어 있을 경우 Event Queue에서 Event handler 하나를 꺼내서 call stack에 넣기
    (5) call stack에 넣은 함수를 실행
    (6) call stack에서 실행된 함수를 call stack에서 제거

JavaScript의 semicolon(";") 사용
  JavaScript에는 semicolon을 자동으로 붙여주는 ASI라는 기능이 존재한다.
    따라서 semicolon을 사용하지 않아도, ASI가 적절한 위치에 semicolon을 삽입한다.
    그러나 "적절한 위치"라는 것 때문에, semicolon을 사용하는 것에 대한 찬반이 나뉜다.
  결론
    우선은 semicolon을 사용하자. 
  찬성
    ASI의 기능을 유추하기 어렵기 때문에 semicolon을 사용해야한다.
      의문점: semicolon을 사용하면 ASI가 작동하지 않는가? 즉 semicolon사용 유무와 관계없이 ASI를 신경써야 하는것인가
    https://okky.kr/article/448378
      semicolon을 사용하지 않으면 비직관적인 경우의 예시
    TC39(ECMA 인터내셔널의 ECMA 스크립트 담당 기술 위원회)에서는 향후에 언어가 확장되면서 발생할 수 있는 문제를 방지하기 위해서, 세미콜론을 넣는 스타일을 권장하는 듯하다.
  반대
    https://feross.org/never-use-semicolons/
    행의 시작을 [ , ( , ` 으로 하지 앟는다면 문제가 생기지 않으며, 꼭 그렇게 해야할경우 semicolon으로 행을 시작하면 된다.
  참고
    https://bakyeono.net/post/2018-01-19-javascript-use-semicolon-or-not.html
    https://okky.kr/article/448378
    https://feross.org/never-use-semicolons/

JavaScript의 변수
  let varName1 = content 와 같이 선언
  loosely typed language, or dynamic language 
    var의 type을 미리 선언할 필요가 없다.
  var, let, const가 존재
    ES6부터 let 과 const를 사용할 수 있게 되었다.
    var은 함수레벨 스코프, let과 const는 블럭 레벨 스코프 
    var로 선언한 변수는 선언전에 사용해도 에러가 나지 않지만(미선언 사용), let,const는 에러가 발생한다.
    const는 선언과 동시에 초기화 해야한다.
    const는 한번 할당한 값을 변경할 수 없지만, const object의 property가 바뀌는 것은 막지 못한다.
    var의 경우 버그발생과 메모리누수의 위험등이 있기 때문에 let, const 사용을 권장 
  자료형 https://developer.mozilla.org/ko/docs/Web/JavaScript/Data_structures
    const선언되지 않았다면, 자료형 변형도 가능하다. ( ex: str -> bool)
    최신 ECMAScript 표준은 다음과 같은 7개의 자료형을 정의한다.
      Primitive data type: Boolean, Null, Undefined, Number, String, Symbol
        변경 불가능한 값(immutable value)이다.
        메모리에 값을 그대로 저장한다
      Reference data type: Object
        메모리에 값을 주소로 저장한다.
        https://ryulog.tistory.com/140
    Boolean 
      Boolean 은 논리적인 요소를 나타내고, true 와 false 의 두 가지 값을 가질 수 있다.
    Null  
      Null 타입은 딱 한 가지 값, null 을 가질 수 있다.
    Undefined
      값을 할당하지 않은 변수는 undefined 값을 가진다. 
    Number
      ECMAScript 표준에 따르면, 숫자의 자료형은 배정밀도 64비트 형식 IEEE 754 값 (-(253 -1) 와 253 -1 사이의 숫자값) 단 하나만 존재한다. 
      정수만을 표현하기 위한 특별한 자료형은 없다. 
      +Infinity, -Infinity, NaN(숫자가 아님)을 표현할 수 있다.
    String
      자바스크립트의 String 타입은 텍스트 데이터를 나타내는데 사용한다. 
      기타
        "", '', ``을 사용하며, ``(backtick)을 사용할 때 ${var}을 통해 var을 표현할 수 있다.
        이모티콘은 string이다.
    Symbol
      Symbol 은 ECMAScript 6 에서 추가되었다. 
      Symbol은 유일하고 변경 불가능한 (immutable) 기본값 (primitive value) 이다. 
      또한, 객체 속성의 key 값으로도 사용될 수 있다 (아래를 볼 것). 
      몇몇 프로그래밍 언어에서는 Symbol을 atom 이라고 부른다. 또, C 언어의 이름있는 열거형 (enum) 과도 비슷하다.
    Object = {key:value, key2:value2}
      객체는 식별자 (Identifier) 로 참조할 수 있는, 메모리에 있는 값이다.
      Properties
        객체 리터럴 문법 (object literal syntax)을 이용한다.
        key: value
          key는 String 혹은 Symbol이다
          value는 객체를 포함한 어떠한 자료형도 될 수 있다.(무명함수또한 가능하다)
      두 종류의 객체 속성이 있는데, 이들은 종류에 따라 특성값들을 가질 수 있다. 데이터 (data) 속성과 접근자 (accessor) 속성이 그것이다.
        Data property: key에 value를 연결한다
        Accessor Property: value를 가져오거나 저장하기위해, key에 하나 혹은 두 개의 Accessor Function (get,set)을 연결짓는다.
      기타 속성
        const로 선언되어도 property에 접근할 수 있다.
        .key 혹은 [key] 을 통해 각각의 property에 접근한다.
        obj1={var1,var2}=={var1:var1,var2:var2}
      여러 Object들 
        "Normal" objects, and functions ??
        Dates: 시간을 나타낸다.
        Arrays: 정수키를 가지는 일련의 값들을 표현하기 위한 오브젝트이다.
        WeakMaps,Maps,Sets
          이 자료형들에서는 키가 문자열 뿐만 아니라 오브젝트도 될 수 있다. 
          Set은 오브젝트의 집합을 나타내는 반면에 WeakMaps와 Maps는 오브젝트에 값을 연관시킬 수 있다. 
          Map과 WeakMap의 차이는 전자는 오브젝트 키를 열거할 수 있다는 것이다. 이것은 가비지 콜렉션에서 이점을 준다.
        TypedArrays


JavaScript의 함수 선언
  오버로딩이 불가능하다
    각각의 js파일의 함수를 object의 내장함수로 구현하면 중복우려를 덜 수 있다.
  일반적인 함수
    function funcName(parameter){
      ... 
    } 
    끝부분에 semicolon을 붙이지 않는다.
    object에 내장함수를 만들 수 있다(JavaScript의 변수 - object 참고)
  무명함수: function(arg){...}
    addEventListener와같이 전달인자가 있으면, arg에 들어간다.

JavaScript의 여러 함수
  arr.forEach(func) : 각 원소에 대해 func(ele)
  arr.filter(func) : func(ele)->true/false, true인 ele로 구성된 arr 반환 
  parseInt(str) : str to integer
  alert object: 경고창을 띄우는 object
  map object: object는 map과 유사하지만 다르기 때문에, map이 따로 존재 https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Map

JavaScript의 연산자
  https://developer.mozilla.org/ko/docs/Web/JavaScript/Guide/Expressions_and_Operators
  비교 연산자의 동작이 다른 언어와 다소 차이가 있다.
    비교 연산자의 자료형이 다르면, 적절하게 변환 후 비교한다
      3=="3": true, "12">3: true, "3"!=4: true
    엄격한 비교는 ===, !== 두가지가 있다. 연산자의 자료형을 변환하려고 시도하지 않는다.

console object: console에 정보를 출력
  log vs dir
    console.log(args): args를 출력. object, array를 포함한 모든 자료형 출력 가능. 각 arg는 공백으로 구분 
    console.dir(arg): arg 하나를 출력, 모든 자료형 출력 가능.
    https://developer.mozilla.org/ko/docs/Web/API/Console/log
    console.log는 요소를 HTML과 같은 트리 구조로 출력합니다.
    console.dir은 요소를 JSON과 같은 트리 구조로 출력합니다.

JavaScript with Html
  DOM object (Document Object Module): html을 다루는 object
    HTMLElement: 
      document: html document
      document.body: querySelector를 이용하지 않아도 body는 가져올 수 있다.
      ele.querySelector: ele의 child에서 원하는 요소(#id,.class,tag)를 찾는다.  
      ele.classList: ele의 class를 다룬다. https://developer.mozilla.org/ko/docs/Web/API/Element/classList
      input.value, input.placeholder등, HTMLElement.요소 는 attribute(placeholder)와, tag에 내장된 요소(value) 모두에 접근할 수 있는듯?
      JavaScript기본값으로 코딩되어있는듯, input object에 value, placeholder등이 있다고 생각하면 이해가 쉬울듯
      ele.appendChild(target): ele 내부에서 가장뒤에 target 추가(prependChild: 가장 앞에 추가)  
    event: event 처리. https://developer.mozilla.org/ko/docs/Web/Events
      addEventListener는 비동기 이벤트이다.
      ele.addEventListener(operate,func)  
        ele: navigator, HTMLElement, window
        operate: load, click, submit, ...
          load: load 이벤트는 리소스와 그것에 의존하는 리소스들의 로딩이 완료되면 실행됩니다.  
        func: operate가 발생하면 수행하는 함수
          func(event)가 기본값
          func(other arg) 이건 가능한지 모르겠다. 잘 모르겠으면 무명함수 이용
          무명함수
        event: event와 관련된 object
          event.preventDefault(): event의 기본동작을 방지한다.(ex: form은 data를 보내고 새로고침한다)
    Date: 시간을 처리. https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Date
      Date 생성자(및 동일한 동작의 Date.parse())를 사용한 날짜 분석은 동작이 일관적이지 못하고 브라우저끼리 차이가 존재하므로 사용하지 않는 것이 좋습니다.
    innerHTML vs innerText  
      ele.innerHTML=value 와 같이 사용.
      innerHTML은 value를 html로 인식하고, tag등이 있으면 적용하지만, innerText는 모두 text로 처리
      HTMLElement.innerText, Node.textContent 와의 차이? https://developer.mozilla.org/ko/docs/Web/API/Node/textContent
      https://hianna.tistory.com/483
  setInterval(func, x ms): ms시간 마다 func반복 실행
  localStorage: web에 존재하는 localStorage
    이때 object는 JSON.stringify(object), JSON.parse(string)를 통해 string으로 변환이 필요하다.
    map 과 같이 기본 자료형이 아닌 경우는, 추가적인 변환을 통해 object 혹은 array형식으로 만들어주어야한다. 
      map to localstorage: https://intro0517.tistory.com/153
        Map -> String (Map to String): var str = JSON.stringify(Array.from( map.entries()));
        String -> Map (String to Map): var map = new Map(JSON.parse(str));
  navigator func
    geolocation: 좌표와 관련됨

기타 유용한 기술
  id를 정할 때, id: String(Date.now()) 와 같이 하면 중복 염려도 없고 좋다. 
  https://openweathermap.org/ : 날씨데이터등을 불러오는 프리웨어 API

알고싶은것
  로컬 말고 오프라인 파일에 저장법 
  then: 무언가가 실행된 후 실행?(weather.js참고)
  