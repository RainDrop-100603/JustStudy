JavsScript tips
https://developer.mozilla.org/ko/docs/Web/JavaScript

JavaScript의 기본
  top to bottom
  자료형은 python과 유사한 면이 있다.
  semicolon의 사용, {}, 주석처리(//, /**/), camelCase 사용등 c++과 유사한 면이 있다.
  html의 유일한 frotend programming language (backend는 다른 옵션도 존재한다)
  js파일을 목적에 따라 분할하여 사용하면 좋다.(다른 프로그래밍 언어와 비슷하게 이용)

JavaScript의 semicolon(";") 사용
  JavaScript에는 semicolon을 자동으로 붙여주는 ASI라는 기능이 존재한다.
    따라서 semicolon을 사용하지 않아도, ASI가 적절한 위치에 semicolon을 삽입한다.
    그러나 "적절한 위치"라는 것 때문에, semicolon을 사용하는 것에 대한 찬반이 나뉜다.
  결론
    우선은 semicolon을 사용하자. 
  찬성
    ASI의 기능을 유추하기 어렵기 때문에 semicolon을 사용해야한다.
      의문점: semicolon을 사용하면 ASI가 작동하지 않는가? 즉 semicolon사용 유무와 관계없이 ASI를 신경써야 하는것인가
    https://okky.kr/article/448378
      semicolon을 사용하지 않으면 비직관적인 경우의 예시
    TC39(ECMA 인터내셔널의 ECMA 스크립트 담당 기술 위원회)에서는 향후에 언어가 확장되면서 발생할 수 있는 문제를 방지하기 위해서, 세미콜론을 넣는 스타일을 권장하는 듯하다.
  반대
    https://feross.org/never-use-semicolons/
    행의 시작을 [,(,' 으로 하지 앟는다면 문제가 생기지 않으며, 꼭 그렇게 해야할경우 semicolon으로 행을 시작하면 된다.
  참고
    https://bakyeono.net/post/2018-01-19-javascript-use-semicolon-or-not.html
    https://okky.kr/article/448378
    https://feross.org/never-use-semicolons/

JavaScript의 변수
  let var1 = "content" 와 같이 선언
  var, let, const가 존재
    ES6부터 let 과 const를 사용할 수 있게 되었다.
    var은 함수레벨 스코프, let과 const는 블럭 레벨 스코프 
    var로 선언한 변수는 선언전에 사용해도 에러가 나지 않지만(미선언 사용), let,const는 에러가 발생한다.
    const는 선언과 동시에 초기화 해야한다.
    const는 한번 할당한 값을 변경할 수 없지만, const object의 property가 바뀌는 것은 막지 못한다.
    var의 경우 버그발생과 메모리누수의 위험등이 있기 때문에 let, const 사용을 권장 
  자료형
    const선언되지 않았다면, 자료형 변형도 가능하다. ( ex: str -> bool)
    bool(true/false), int(123), float(1.346)
    undefined: Null과 유사 
    string  
      ""와 ''와 ``을 사용하며, ""와 ''는 python과 같이 문자열을 나타낸다.
      `` 과 ${}을 사용하여 다른 자료형과 혼합사용이 가능하다. (키보드에서 tab위에 있다)
        `Hello ${name} you are ${age} years`
      이모티콘은 string이다.
    array ( const arr1 = [var1, 2, 3.14, "text", true, obj1]; )
      python의 arr과 유사
      모든 자료형이 들어갈 수 있다.
      []을 통해 개별 원소에 접근한다.
    object (const obj1 = {property1:value1, property2:3, property3:var1}; )
      value에는 모든 자료형이 들어갈 수 있다.
      . 을 통해 각각의 property에 접근한다.
      const로 선언되어도 property에 접근하고 변경할 수 있다.
      함수를 내장할 수 있다. 
        property에는 함수의 이름, value에는 function(parameters){...}을 넣어준다.

JavaScript의 함수 생성
  function funcName(parameter){ ... } (내가하는 c++스타일처럼 ()와{ 가 붙어있게 하고 내용은 다음부분에 넣고, 마무리는 } 로)
  끝부분에 semicolon을 붙이지 않는다.
  object에 내장함수를 만들 수 있다(JavaScript의 변수 - object 참고)

JavaScript의 연산자
  https://developer.mozilla.org/ko/docs/Web/JavaScript/Guide/Expressions_and_Operators
  비교 연산자의 동작이 다른 언어와 다소 차이가 있다.
    비교 연산자의 자료형이 다르면, 적절하게 변환 후 비교한다
      3=="3": true, "12">3: true, "3"!=4: true
    엄격한 비교는 ===, !== 두가지가 있다. 연산자의 자료형을 변환하려고 시도하지 않는다.

console object: console에 정보를 출력
  log vs dir
    console.log(args): args를 출력. object, array를 포함한 모든 자료형 출력 가능. 각 arg는 공백으로 구분 
    console.dir(arg): arg 하나를 출력, 모든 자료형 출력 가능.
    https://developer.mozilla.org/ko/docs/Web/API/Console/log
    console.log는 요소를 HTML과 같은 트리 구조로 출력합니다.
    console.dir은 요소를 JSON과 같은 트리 구조로 출력합니다.

JavaScript with Html
  DOM object (Document Object Module): html을 다루는 object
    ele.querySelector: ele의 child에서 원하는 요소(#id,.class,tag)를 찾는다.  
    ele.classList: ele의 class를 다룬다. https://developer.mozilla.org/ko/docs/Web/API/Element/classList
    event: event 처리. https://developer.mozilla.org/ko/docs/Web/Events
    date: 시간을 불러옴


body=document.body: query로 찾을 필요 없다.
classList.erase(): 한번에 여러개를 지울 수 있다(더할 수도 있을 듯)
document: 전체 파일을 의미함 
innerHtml: tag내부에 text부분을 의미함 
new Date(): 현재 시간을 불러옴 https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Date
setInterval(func,x ms): x ms마다 func반복 실행 
localstorage: 여러 옵션을 local storage에 저장할 수 있다(이름, 국적, 24시간 표기 등등)4
preventEvent

4.2, 4.3 복습 