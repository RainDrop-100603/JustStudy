algorithm tips

//https://www.youtube.com/watch?v=x7STjpcKZP8 
//사회복무요원 교육 

조합문제
  제약 충족 문제 (Constraint Satisfaction Problem) : 특정한 제약에 해당하는 답을 찾는 문제
      스도쿠, n-queen등 
    아래 두 조건을 만족하면 대부분 빠르게 실행된다.
      제약 전파(Constarint Propagation)
        답의 일부를 생성한 뒤에, 문제의 제약을 이용하여 얻을 수 있는 힌트를 찾아내는것
          답의 일부를 생성하면, 다른 조각의 답을 알게 되는것: 스도쿠를 떠올려보자
          혹은 생성한 답이 정답이 아니라는 것을 알게 되는것도 제약전파이다.
      채울 순서 정하기: 변수 순서 + 값 순서(Variable ordering + Value ordering)
        카쿠로, 스도쿠에서 빈공간이 적은 line부터 해결하는 것 
  algospot 444p
    TSP, Sudoku 문제의 강력한 해결법 
    http://norvig.com/sudoku.html
      
결정 문제(Decision Problem)
  특정 조건에 대해 예 혹은 아니오의 답만 나오는 문제
  최적화 문제를 결정 문제로 바꾸어 해결하는 방법이 존재한다.
    결정문제의 난이도는 최적화 문제보다 쉽거나 같다.

이분법 주의사항
  13.2절의 내용을 보고 더 공부하자
    450p 이분법의 함정을 보면,탐색의 범위가 유한한(idx를 이용한 이분법)은 수치적 안정성을 잃어버릴 수 있다.
      참을 반환해야하는 x가 계산오류로 거짓을 반환한다면, 범위가 유한한 이분법은 무한한 이분법에 비해 오차가 커지게 된다.
  이분법의 기준은 value일 수도, idx일 수도, 다른 어떤 기준이 될 수도 있다.
  변수의 개수가 무한할때와 유한할때의 일반적인 작동방식이 다르다.
    유한할 때: 조건과의 오차가 가장 작은 변수를 찾아내면 된다.
    무한할 때: 조건과의 오차가 특정기준 이하인 변수를 찾아내면 된다.
  기저를 잘못 설정하면 무한루프에 빠질 수 있다.
    일반적인 예시인 [left,right) 범위에서 mid=(left+right)/2를 변수로 갖는 이분법의 경우
      left==right와 left==right-1 모두 기저가 되어야 한다.
      left==mid와 같이 사용할 수도 있다. 
  
수치해석
  Decision Problem: 이분법, 삼분탐색
    이분법  
      종료판정
        횟수반복: 이분법을 x번 반복한다. 오차 = (|hi - lo|/2)/(2^x)
          장점: 조건 단순, 무한루프X, 수행시간 예측 용이, 숫자가 크든 작든 문제 없음 
        절대오차: hi와 lo의 차이가 특정 값 이하 (허용 오차가 x라면, |hi-lo|>x 를 조건을 두면 된다.)
          문제점: 다루는 값의 크기가 크다면 문제가 될 수 있다. 부동소수점의 경우 숫자가 크다면 표현 간격이 넓어진다(듬성듬성).
        상대오차: 상대오차 x - (1-x)*hi<avg(lo+hi)<(1+x)*lo (단, lo와 hi는 양수)
          문제점: lo와 hi의 부호가 다르거나, 둘 다 음수일 경우 등을 고려하려면 코드가 복잡해진다. 
      반복문 불변식의 존재이유 -> 수학적 귀납법을 통한 알고리즘의 정당성 증명
        ex)f(x)=0인 x가 정답, 연속함수일경우, f(lo)<=0<f(hi) 라면 lo와 hi사이에 정답이 존재한다. 
      기타
        0(정답) 부분을 따로 처리할 필요는 없다.
        (lo+h1)/2를 정답으로 간주한다.
    삼분검색
      특정한 조건의 함수에서, local maximum(or local minimum)을 찾는 방법
        unimodal function: 하나의 local maximum을 가진다. 극대: mode
        strictly increasing before local maximum
        strictly decreasing after local maximum
      특수조건
        기울기가 0인지점이 있으면 strictly하지 않지만, 해당 지점이 local maximum(minimum)의 값과 같다면 상관없다.
        local maximum이 연속적이다 ; 라고 표현할 수 있다.
      lo, hi, 1/3지점, 2/3지점을 확인하여 범위를 좁혀나간다
        f(1/3지점)>f(2/3지점) -> hi=2/3지점, else: lo=1/3지점 
      오차: 이분법과 동일하며, 매 실행시 범위가 2/3으로 줄어든다.
        x회 반복: (|hi-lo|/2)/((2/3)^x)
      기타
        국소탐색보다 빠르고 수렴판정이 용이하다
        미분할 수 없는 함수에도 이용이 가능하다 

여러가지 유형의 문제들의 해법
  기본적인 접근방법
    프로그래밍 기법은 정답이 아닌 도구임을 인식하자 (이분법으로 다변수 다항 방정식을 푸는 방법을 떠올려보자)
    수학적인 접근도 생각해보자(의외로 간단한 경우가 있다.)
    추가바람 
  단변수 다항 방정식(변수가 x 하나인 다항 방정식, ax^2+bx+c)
    이분법(근사,한계 많음): 두 극점 사이에는 최대 하나의 근만이 있음, 2차이하 풀기가능, 재귀 
    여러 수치해석 알고리즘 

용어
  ternary search(삼분검색): 삼분 검색 
  unimodal function: 하나의 local maximum만 있는 func
  strictly increasing vs monotonically increasing: 순증가 vs 단조증가, 순증가는 기울기가 0인지점이 없다.
  concave(convex) function: 2차함수같이 위로(아래로) 볼록한 함수
    convex function 정의: 서로 다른 두 점을 직선으로 이었을 때, 이 직선이 그래프 밑으로 내려가지 않는 함수(증명에 이용 가능)