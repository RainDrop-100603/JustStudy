algorithm tips

//https://www.youtube.com/watch?v=x7STjpcKZP8 
//사회복무요원 교육 

<키워드들>

종합 팁
  런타임 에러(runtime error)
    배열을 점검, 배열의 크기가 0인 경우를 반드시 생각하자 
  아이디어
    예외를 많이 처리해주어야 하는 아이디어라면, 다른 아이디어는 없는지 생각해보자 

조합문제
  제약 충족 문제 (Constraint Satisfaction Problem) : 특정한 제약에 해당하는 답을 찾는 문제
      스도쿠, n-queen등 
    아래 두 조건을 만족하면 대부분 빠르게 실행된다.
      제약 전파(Constarint Propagation)
        답의 일부를 생성한 뒤에, 문제의 제약을 이용하여 얻을 수 있는 힌트를 찾아내는것
          답의 일부를 생성하면, 다른 조각의 답을 알게 되는것: 스도쿠를 떠올려보자
          혹은 생성한 답이 정답이 아니라는 것을 알게 되는것도 제약전파이다.
      채울 순서 정하기: 변수 순서 + 값 순서(Variable ordering + Value ordering)
        카쿠로, 스도쿠에서 빈공간이 적은 line부터 해결하는 것 
  algospot 444p
    TSP, Sudoku 문제의 강력한 해결법 
    http://norvig.com/sudoku.html
      
결정 문제(Decision Problem)
  특정 조건에 대해 예 혹은 아니오의 답만 나오는 문제
  최적화 문제를 결정 문제로 바꾸어 해결하는 방법이 존재한다.
    결정문제의 난이도는 최적화 문제보다 쉽거나 같다.

이분법 주의사항
  13.2절의 내용을 보고 더 공부하자
    450p 이분법의 함정을 보면,탐색의 범위가 유한한(idx를 이용한 이분법)은 수치적 안정성을 잃어버릴 수 있다.
      참을 반환해야하는 x가 계산오류로 거짓을 반환한다면, 범위가 유한한 이분법은 무한한 이분법에 비해 오차가 커지게 된다.
  이분법의 기준은 value일 수도, idx일 수도, 다른 어떤 기준이 될 수도 있다.
  변수의 개수가 무한할때와 유한할때의 일반적인 작동방식이 다르다.
    유한할 때: 조건과의 오차가 가장 작은 변수를 찾아내면 된다.
    무한할 때: 조건과의 오차가 특정기준 이하인 변수를 찾아내면 된다.
  기저를 잘못 설정하면 무한루프에 빠질 수 있다.
    일반적인 예시인 [left,right) 범위에서 mid=(left+right)/2를 변수로 갖는 이분법의 경우
      left==right와 left==right-1 모두 기저가 되어야 한다.
      left==mid와 같이 사용할 수도 있다. 
  
수치해석
  이분법  
    종료판정
      횟수반복: 이분법을 x번 반복한다. 오차 = (|hi - lo|/2)/(2^x)
        장점: 조건 단순, 무한루프X, 수행시간 예측 용이, 숫자가 크든 작든 문제 없음 
      절대오차: hi와 lo의 차이가 특정 값 이하 (허용 오차가 x라면, |hi-lo|>x 를 조건을 두면 된다.)
        문제점: 다루는 값의 크기가 크다면 문제가 될 수 있다. 부동소수점의 경우 숫자가 크다면 표현 간격이 넓어진다(듬성듬성).
      상대오차: 상대오차 x - (1-x)*hi<avg(lo+hi)<(1+x)*lo (단, lo와 hi는 양수)
        문제점: lo와 hi의 부호가 다르거나, 둘 다 음수일 경우 등을 고려하려면 코드가 복잡해진다. 
    반복문 불변식의 존재이유 -> 수학적 귀납법을 통한 알고리즘의 정당성 증명
      ex)f(x)=0인 x가 정답, 연속함수일경우, f(lo)<=0<f(hi) 라면 lo와 hi사이에 정답이 존재한다. 
    기타
      0(정답) 부분을 따로 처리할 필요는 없다.
      (lo+h1)/2를 정답으로 간주한다.
  삼분검색
    특정한 조건의 함수에서, local maximum(or local minimum)을 찾는 방법
      unimodal function: 하나의 local maximum을 가진다. 극대: mode
      strictly increasing before local maximum
      strictly decreasing after local maximum
    특수조건
      기울기가 0인지점이 있으면 strictly하지 않지만, 해당 지점이 local maximum(minimum)의 값과 같다면 상관없다.
      local maximum이 연속적이다 ; 라고 표현할 수 있다.
    lo, hi, 1/3지점, 2/3지점을 확인하여 범위를 좁혀나간다
      f(1/3지점)>f(2/3지점) -> hi=2/3지점, else: lo=1/3지점 
    오차: 이분법과 동일하며, 매 실행시 범위가 2/3으로 줄어든다.
      x회 반복: (|hi-lo|/2)/((2/3)^x)
    기타
      국소탐색보다 빠르고 수렴판정이 용이하다
      미분할 수 없는 함수에도 이용이 가능하다 
  수치 적분 알고리즘 
      Simpson's method: 주어진 구간의 함수를 2차함수로 근사하여 적분하며, 2차이하의 함수라면 항상 정확한 값을 반환

정수론
  소수판별
    간단한 방법 
      p*q=n에 대해, 두 수는 각각 root(n)이상, 이하이므로, n에대한 소수판별은 root(n)까지에 대해 확인하면된다.
      수행시간은 지수시간 알고리즘 이라는데 496p, 4.4절 확인 후 정리 
    에라토스테네스의 채
      2부터 시작하여, 해당값의 배수를 모두 지워준다. 지워지지 않은 수는 소수이다.
      i가 대상일때, i*2가 아닌 i*i부터 시작한다. 2~(i-1)까지의 배수는 이미 그전에 모두 지워졌기 때문이다.
      수행시간은 O(nlog(logn))
    효율적인 알고리즘들은 너무 복잡해서 대회에서는 사용되지 않는다.
  소인수분해
    간단한 방법
      n을 2~root(n)까지 나눈다. 합성수는 앞선 소수에서 자동으로 걸러지므로 신경쓰지 않아도 된다.
      혹은 에라토스테네스의 채를 이용하여 소수를 구한후 나눗셈 해준다.
        에라토스테네스의 채를 이용할 때, 해당하는 수의 가장 작은 소수를 기록해두면, 아주 빠르게 소인수 분해가 가능하다.
  유클리드 알고리즘 <euclid, gcd>
    gcd(p,q){return q==0 ? p : gcd(q,p%q)}  (q==0대신 q%p를 해도 되긴 하는데, q==0이 더 직관적)
    p>q인 p와 q의 공약수 집합은, p-q와 q의 공약수 집합과 같다.
      증명: 공약수 x에 대해, q%x=0 이며 p%x=0 이므로, (p-q)%x=(p%x-q%x)%x=0이다. 모든 공약수 x에대해 성립하므로 공약수 집합은 같다.
    q가 0이 될 때의 p가 최대공약수 이다.
  모듈러 연산 <mod>
    모듈러 덧셈, 뺄셈, 나눗셈은 분배법칙,결합법칙이 성립한다.
    모듈러 나눗셈: a/b % N = a*(b^-1) % N, b^-1 은 b의 곱셈 역원
    모듈러 연산 곱셈 역원
      N모듈러 연산에서의 곱셈역원 x는, Ax ≡ 1 mod N 로 정의된다. 역원 x는 A^-1로 표기된다.
        N과 서로소인 A만 역원을 가진다.
          Ax % N = 1 -> Ax = kN + 1 -> Ax - kN = 1 -> N과 A가 서로소여야 해가 1이 나올 수 있다.(베주 항등식?)
      구하는법
        N이 소수인 경우, A^-1 ≡ A^(N-2) mod N (페르마의 소정리)
        N이 소수가 아닌경우, Ax % N ≡ 1 mod N 이 성립하는 x를 구한다, x의 범위는 0~N-1
          디오판틴 방정식의 해와 같다. Ax % N ≡ 1 mod N -> Ax = kN + 1 -> Ax - Nk = 1 
            디오판틴 방정식: 일차 부정방정식, ax + by = c (단 x,y는 정수)
  추가적인 알고리즘, 책에서는 설명이 안되어 있지만 필요하면 찾아보자
    확장 유클리드 알고리즘
      gcd(p,q)=ap+bq로 나타낼 수 있는데, 최대공약수와 더블어 a,b를 반환하는 알고리즘을 의미
    중국인 나머지정리
      n%3=1, n%5=2, n%6=7 을 만족하는 최소의 n은 얼마인가? 를 해결하는 문제
    루카스의 정리
      mod를 이용한 nCr 계산, n과 r이 매우 큰 경우에도 계산할 수 있도록 해줌

계산 기하
  벡터: 계산 기하를 다룰 때 필요한 방식
    벡터의 구현 -> pair(x,y)로 구현 가능 
      직선은 두 벡터로 나타낼 수 있다.
    아예 클래스로 만들어 여러 함수를 미리 구현하면 편하다 (519p참고)
      비교, 덧셈 뺄셈, 실수곱셈, 길이, 단위벡터
      x축의 양의방향 으로부터의 반시계방향 각도
      내적, 외적, 사영
    외적:두 벡터의 외적은 평행사변형의 넓이 -> 응용하면 단순 다각형의 넓이를 구하기 쉽다.
      외적의 부호: 두 벡터의 방향성(A벡터가 B벡터의 시계방향에 있다)을 알 수 있다.
    직선의 교차
      직선을 한 점과 방향벡터로 나타내면, 교차를 구하기 편하다.
    선분의 교차
      4가지 경우, 겹치지 않음, 1점에서 교차, 일부 겹쳐짐, 포함됨 
    코드 15.5: p는 이미 교점 중 하나이다.
      두 선분이 평행한 경우는 따로 처리
      두 선분의 교점이 하나인 경우에는, 그 교점이 각 선분의 범위에 존재하는지 확인 
  다각형
    다각형의 형태
      볼록 다각형(convex polygon): 모든 내각이 180도 미만
        오목 다각형(concave polygon): 180도를 넘는 내각을 가짐
      단순 다각형(simple polygon): 다각형의 경계가 스스로 교차하지 않음 
    다각형의 면적
      이때 다각형의 점들은 시계방향(or반시계방향) 으로 주어져야 한다.
      단순 다각형: 어떤 점 q에 대해 외적 -> 원점으로 하면 더 편하다. (1권 539p참고) 
    어떤 점의 내부/외부 판별 
      내부에서 우측으로 반직선을 그엇을 때, 변과의 교차점이 홀수면 내부, 짝수면 외부 
        반직선과 변이 평행이면 무시
        반직선이 동시에 두 변과 만나면(꼭짓점), 하나만 만났다고 판단해야함
      inside 함수: 위에서 말한 것을 모두 고려함 (p는 꼭짓점, q는 점)
        if( p[i].y > q.y != p[(i+1)%n].y > q.y ) -> 교차점 +1 : 핵심 if함수
          반직선과 변이 평행하면, 둘다 false(or true)이므로 무시된다.
          반직선이 꼭짓점과 만나면, 한 변에서는 false/true, 다른 변에서는 false/false이므로 하나만 카운팅된다.
    polygon clipping
      두 단순 다각형의 겹치는 면적을 구하는 방법
      A 다각형의 모서리에 대해, 모서리가 이루는 직선의 왼쪽은 다각형의 영역을 포함한다(다각형이 시계반대방향으로 주어질경우)
        즉, B다각형을 A다각형의 모서리-직선으로 자르면, 그 왼쪽부분은 A다각형에 포함되는 부분, 오른쪽은 제외되는 부분이다.
        따라서 B다각형을 A다각형의 모든 모서리에 대해 모서리-직선으로 자르면, A다각형과 B다각형의 겹치는 영역을 구할 수 있다.
    다각형 만들기
      여러가지의 점을 모두 포함하는 convex hull을 만들 수 있다.
      좌측하단 점은 항상 최외각 점임을 이용한다(STL: min_element 이용가능)
      gift Wrapping - O(n^2) : ccw를 이용해 가장 우측인 점을 구하면서 순회한다
        점의 집합 중 꼭짓점이 되는 것을 찾는다(x,y좌표가 가장 작은것을 구하면 된다.)
        다른 모든 점을 순회하며, ccw를 이용하여 다음 꼭짓점을 구한다.
          최초 next점은 임의로 선택한다.(자기자신만 아니면 됨)
          꼭짓점과 next점은 직선을 이룬다.
          다른 점이 직선의 우측에 있다면, 해당 점이 새로운 next점 이다.
          모든 점에 대해 확인하면, 가장 우측에 있는점이 next점, 즉 다음 꼭짓점이 된다.
      Graham Scan - O(nlgn) : y좌표가 가장 작은 점을 기준으로, 다른 꼭짓점과의 직선의 polar는 항상 증가함을 이용한다.
        시작점은 y좌표가 가장 작은 점으로 한다. y좌표가 같다면 x좌표가 더 작은 점을 사용한다.
        다른 모든점들에 대해, 시작점과 이루는 직선의 각도를 구하고, 작은 순서대로 정렬한다.
        각도가 작은 순서대로, 다음 점으로 선택한다.
          

  라인 스위핑 (plane sweeping or line sweeping)
    직사각형 합집합의 면적
    다각형 교집합의 넓이 


여러가지 유형의 문제들의 해법
  기본적인 접근방법
    프로그래밍 기법은 정답이 아닌 도구임을 인식하자 (이분법으로 다변수 다항 방정식을 푸는 방법을 떠올려보자)
    수학적인 접근도 생각해보자(의외로 간단한 경우가 있다.)
    벡터적 접근법도 생각해보자 
    추가바람 
  단변수 다항 방정식(변수가 x 하나인 다항 방정식, ax^2+bx+c)
    이분법(근사,한계 많음): 두 극점 사이에는 최대 하나의 근만이 있음, 2차이하 풀기가능, 재귀 
    여러 수치해석 알고리즘 

용어
  ternary search(삼분검색): 삼분 검색 
  unimodal function: 하나의 local maximum만 있는 func
  strictly increasing vs monotonically increasing: 순증가 vs 단조증가, 순증가는 기울기가 0인지점이 없다.
  concave(convex) function: 2차함수같이 위로(아래로) 볼록한 함수
    convex function 정의: 서로 다른 두 점을 직선으로 이었을 때, 이 직선이 그래프 밑으로 내려가지 않는 함수(증명에 이용 가능)

기타 팁
  i~i+1번째 ele를 비교하는 함수를 사용할 때, (n-1)~0까지 한번에 비교하게 만들고 싶다면, point[(i+1)%n]처럼 표시하면 된다. 
    