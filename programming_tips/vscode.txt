=====목차===== 
약속
기타 
formatter & linter
    formatter 
    linter
    cpp 
    python
python interpreter and pipenv
    pipenv 이용법 
정리 필요
==============


-----약속----- 
변수는 한국어로 [날짜] 와 같은 형식으로 기록하였다.


-----기타-----
와일드카드: * (아무거나 가능)
경로: . 은 현재 폴더를 의미한다. 


-----formatter & linter-----
formatter
    prettier등의 확장이 설치되어 있지 않다면, 내장 formatter를 사용한다.
    prettier는 주석을 지맘대로 바꾸고 버그도 있어서, 언어별로 따로 설정해주었다.
    settings.json 
        "editor.formatOnSave": true,
linter
    code에 에러가 있다면 잡아주는 역할을 한다.
    cpp와 같은 compiled 언어에서는 불필요하다(컴파일시 에러 잡아냄)
    python과 같은 언어는 linter가 있으면 유용하다.
cpp 
    formatter: vsc default, google style
    settings.json
        "C_Cpp.clang_format_fallbackStyle": "{ BasedOnStyle: Google, IndentWidth: 4, ColumnLimit: 120}",
            ColumnLimit을 0으로 둘 경우, 줄바꿈을 수행하지 않는다.
python 
    formatter: black 
    linter: flake8
    settings.json 
        "python.formatting.provider": "black",  
        "python.linting.flake8Enabled": true,
        "python.linting.pylintEnabled": false,
            충돌 방지 
        "python.linting.enabled": true,
        "python.linting.flake8Args": ["--max-line-length=120"]
            길이제한 경고기준 설정 


-----python interpreter and pipenv-----
pipenv 이용법 
    vsc는 좌하단에서 interpreter을 선택 가능하다. 
    따라서 pipenv shell을 이용하지 않더라도, interpreter을 사용하면 알아서 가상환경을 세팅한다.
        which python, which python3를 해보면 확인 가능하다.
    문제는, 잘못된 폴더의 가상환경을 선택한다면 모듈화가 꼬일 수 있다.
    따라서 interpreter는 python을 공통적으로 사용하고, pipenv를 통해 가상화에 진입하자 
    settings.json: 현재 파일에서 터미널이 열리게 해준다.
        "terminal.integrated.cwd": "${fileDirname}"


-----정리 필요-----
파이썬 interperter가 대체 뭐야? 꼭 pipenv붙은걸로 설정해야 해? 
모든 프로젝트마다 formatter, linter를 설치해야 하는거야 ?
추측하기론 vsc의 인터프리터를 python-pipenv로 설정하면, pipenv shell을 한 것과 같은 효과인 듯 하다.
    그래서 자기 폴더에 맞는 인터프리터를 선택했다면, pipenv shell을 할 필요가 없는것이다.
그런데 궁금한것은, 인터프리터는 python으로 두고, pipenv shell을 해도 동일한 효과를 내지 않느냐는 것이다.
    만약 그렇다면, formatter와 linter는 전역으로 사용할 수 있다.
https://code.visualstudio.com/docs/python/environments#_select-and-activate-an-environment
which python3를 해보면, vsc interpreter을 python으로 해도, pipenv shell을 하고 난 후에는 적절한 가상환경을 이용한다.
    가상 환경을 잘못 선택할 수 있다는 것을 감안하면, 그냥 interperter는 default를 이용하고, pipenv shell로 진입하는게 낫지 않나 싶다.

 https://sosomemo.tistory.com/53
    https://webnautes.tistory.com/1158
    vsc 세팅은 추후에 공부하자
    설정: 사용자 원격 작업영역, 작업영역은 현재 vscode 영역, 사용자와 원격은 전역설정과 유사하다고 생각됨


python 이용법:
    tasks.json에 파이썬을 추가하긴 했다.
    matplotlib등의 그래프 기능을 이용하려면, jupyter를 이용해야 하는듯하다.
        이를 실행하려면 파일상단에 #%%을 입력하고 run cell을 해야 그래프가 표시가 된다.
        jupyter을 실행하기위해선 ipykernel 을 설치해야 하는듯 한데 pipenv로 로컬로 설치했다. 
            (근데 jupyter가 전역인데 굳이 로컬로 설치해야 하나? )
            (The IPython kernel = ipykernel is the Python execution backend for Jupyter.)