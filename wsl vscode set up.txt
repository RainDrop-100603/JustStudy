wsl vscode c++환경 구성 

wsl 설치: powershell 관리자 권한 실행 -> wsl --install -> 자동으로 ubuntu까지 깔아줌 

ubuntu 셋팅
	전체 업데이트: sudo apt-get update
	gdb환경 구성: sudo apt-get install build-essential gdb
	git 설정: 
		git update: 
			sudo add-apt-repository ppa:git-core/ppa -y
			sudo apt-get update
			apt-get install git -y
		git naming: 
			git config --global user.name "Your Name"
			git config --global user.email you@example.com
	vsc 여는법: ubuntu의 원하는 폴더로 가서 code . (처음엔 뭐 설치함) 	
	python 환경 구성:
		python은 ubuntu에 기본으로 깔려있으나 버전정도는 확인하자
		pipenv는 pip3로 설치해야 하며, pip3는 기본으로는 설치가 안되어 있다. 
			pipenv 설정은 vsc에서 터미널 열고 하는게 편하다. 
		user 경로 설정: "~/.profile 편집" 부분 읽어보고 경로 설정하기 
			vsc에서 해주면 ctrl v도 먹어서 편하다. 
		pipenv 환경 구성은 for_pipenv에서 하고 나머지에서 이용해먹자 
	pipenv와 jupyter 동시사용법
		pipnev shell로 진입 
		pipenv install ipykernel 
		python -m ipykernel install --user --display-name [표시할 커널이름] --name [가상환경이름]
			표시할 커널 이름은 내가 원하는 이름, 가상환경이름은 현재 진입한 가상환경의 이름이다(-2nzCan8t 와 같은 문자는 안써도 됨) 
		설정해주고 ipynb실행 전해 설정한 커널로 실행해주면 된다. 
		kernel은 virtualenvs와 같은 경로에 존재한다. 

vscode 셋팅
	확장프로그램:
		community material theme
		korean language
		material icon theme
		remote-wsl
		c/c++
		code spell checker 
		python
	git clone: 명령 프롬포트 열어서 git: clone 실행 
	디버그: F5
	바로실행: 테스트 작업 실행(단축키는 ctrl shift a로 했음) 

deep learning
	https://medium.com/dawn-cau/wsl2-%EB%94%A5%EB%9F%AC%EB%8B%9D-%ED%99%98%EA%B2%BD-%EA%B5%AC%EC%B6%95%ED%95%98%EA%B8%B0-95d7b95d1f4b
	https://developer.nvidia.com/cuda/wsl
	https://docs.nvidia.com/cuda/wsl-user-guide/index.html
	win11 혹은 2050빌드 이상에서 wsl on cuda가 가능하다. 
	cuda 사용은 윈도우에서 하는것으로 선회하자 
	