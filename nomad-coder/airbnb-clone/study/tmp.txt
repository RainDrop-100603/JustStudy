
sql database
	 여러 종류가 있다.
	첫 행 : 변수이름 = 변수형식 으로 지정. 다음행부터는 변수 형식에 맞도록 입력 
	python manage.py makemigrations
dq.splite3: 데이터베이스

migrate? 2.4절 
	django 는 data models를 확인하고 migration을 생성한다?
	data models - migration - database ? 
	data model을 장고가 사용하는 데이터 유형으로 동기화 하기 위한 migration?
	python manage.py migrate
		데이터를 sql로 migrate
	
function 집합 = 애플리케이션
애플리케이션 집합 = 프로젝트
Airbnb Project
	room Application 
		검색, 생성, 수정, 삭제 func
	예약 App
		예약, 취소 func
	user App
		로그인, 로그아웃, 유저정보 func 
Application은 가능한 한 작은 단위로 만든다.

django-admin startapp ApplicationNames(복수형)
	이때 ApplicationsName은 Django에서 제공하는것과는 이름이 달라야 한다
	이것은 config-settings.py - INSTALLED_APPS에서 확인 가능하다.
	생성된 파일명들은 변경해선 안된다. 그러나 추가로 생성하는것은 자유롭다.
	admins.py : admin에 반영되는 것들
	apps.py : configuartion 파일
	models.py: data, database에 대해 설명한다
	views.py: 사용자에게 보여지는곳, html render하는곳 
	생성후 settings.py에 INSTALLED_APPS에 추가해야 실제로 사용한다.

config
	urls.py: url을 컨트롤, 원칙적으로 url은 여기에서 추가하는 것이다.
	application에 urls.py를 추가하여 간접적으로 할 수 있다.

users application을 만드는 이유
	Django는 admin에서 user정보를 관리할 수 있다.
	그러나 이것은 어디까지나 admin을 위한 것이고 user를 위한것은 아니다.
	그래서 유저가 스스로 자신의 정보를 관리하기 위해 users application을 만든 것
	
framework vs library
	Django framework
		정해진구조에 맞추어 내용을 채워넣는다
	React library
		구조를 직접 자유롭게 만든다.

객체 상속
	상속을 통해 기능을 확장할 수 있다. 예: user의 기능 확장 
	c++에서 배운 상속과 유사하다. 
	Django Documentaion을 통해 방법을 검색할 수 있다.
	class name(상속대상)

vscode settinsg json
	에디터: 사용자 원격 작업영역: 작업영역은 이 vscode 영역, 사용자와 원격은 전역설정과 유사하다고 생각됨
	python path 설정: 이걸 해야지 python.어쩌구가 제대로 실행이 되는듯
	linting과 formatting 설정, 먼저 설치후 설정해야함
	pylint는 flake8과 중복되어 비활성화 

python manage.py makemigrations
	데이터를 migration으로 변환시킨다.
python manage.py migrate
	migration 파일을 적용시킨다.
데이터베이스에 영향을주는 것이 생기면 makemigrations하고 migrate 하면 된다.
	예를들어 아래나오는 char field-choice추가는 영향을 안준다.

models.py
	Django Documentation에서 찾을 수 있다.
	AbstractUser 상속하여 사용하는 것이 일반적이다. 
	추가적인 항목을 추가할 수 있다(예: 혈액형), 입력의 형태를 model field에서 가져와야한다.
		ex: bio = models.TextField(default=""), 도큐먼트에서 찾을 수 있다.
	sql database에 data를 채울때는 default가 필요하다. 두가지 방법이 있다.
		1. default = blabla
		2. null = True (빈 필드 허용)
	사용자에게 보여지는 form 옵션
		blank=True : 채우지 않아도 submit할 수 있다.

. import : 같은 폴더에 있는 파일을 불러올 수 있다.

className에 커서를 올리면, class definition이 나온다.
	class className(inherit):
		""" class definition """
	
model field 종류
	image field -> Pillow 설치 필요(pipenv로 설치하자)
	char field -> 글자수제한 필요(max_length=xx)
		선택지 제한 기능, choices= tuple
			tuplename=((database data,form data), (2,2), ...)
	textfield -> 일반적인 text field 

black이 갑자기 작동을 안한다면, 문법이 잘못된곳이 없는지 확인해보자. "."을 ","로 썼다던지..

decorator : @을 이용한 선언, class위에 있어야 작동 
		admin.site.register(Author)을 @admin.register(Author)로 바꾸기 가능 
	
admin.ModelAdmin 을 상속했을경우 사용하는 model admin
	list display : list에서 보여줄 항목을 선택 
	list filter

UserAdmin: django에서 제공하는 기본 admin 
	from django.contrib.auth.admin import UserAdmin
	fieldSet: 하나로 그룹진부분, admin관리에서는 파란색으로 묶인 부분 
		UserAdmin.fieldsets : 기본 필드셋
		((field1Name,{"fields":(model1,model2)}),(field2Name,{}),...)

장고는 database랑 통신
장고 ORM (object relational mapping): 파이썬 코드를 sql문으로 바꿔서 데이터베이스가 알아먹도록 
	model에 넣는것을 database로 변경