study tmp 


Admin panel
    ordering
    many to many lise_display 방법
        amenities 대신 count_amenities list
        def django_count_amenities(self,obj):
            """self: admin class, obj = 현재 row """
            return "potato"
        count_amenities.short_description = "hello sexy!"
            list의 label, 즉 count_amenities 대신 hello sexy가 row의 label이 된다.
        함수는 클릭해서 정렬 불가
        obj.amenities.all()
        obj.amenities.count()


   
python: __str__ 과 __repr__의 차이 
    https://shoark7.github.io/programming/python/difference-between-__repr__-vs-__str__
python: __ini__ 찾아보기 

_set : 나를 (ForeignKey등으로) 지정한 객체들의 리스트 
    a Foreignkey to B -> B has a_set
    related_name: a_set의 이름을 바꿔준다
        related_name이 같아도 된다? 


Relationship
    QuerySet: ManyToMany, Foreignkey
        ManyToMany, Foreignkey (from) 등으로 지정된 target에는, set_fromName 이라는 QuerySet이 생성된다.
            related_name="names"를 ManyToMany, Foreignkey의 arg로 넣으면, set_fromName이 names로 이름이 바뀐다.
            related_name은 같은 target에 대해서는 모두 이름이 달라야 한다. (당연히 중복되면 안된다.)
                from이 같더라도 target이 다르면 이름이 동일해도 상관없다. 이것은 target에 생성되는 것이지, from에 생성되는 것이 아니기 때문이다.
    요소 
        obj.name.count(): ManyToMany
            개수를 세준다.
        obj.name.all(): ManyToMany
            모든 요소를 queryset으로 반환한다.


django에서 python으로 database 다루기
    순서
        pipenv shell
        python manage.py shell
        from usr.models import User : 다루기 원하는 요소 import
    함수
        exit(): console 종료 
        objects: python을 통해 database에서 정보를 가져올 수 있게끔 한다? 아니면 object(객체)를 다루는 요소, 즉 전체 컨트롤 API의 일부? 
            className.objects.all(): 모든 obj를 QuerySet형식으로 반환한다.
            className.objects.count(): obj의 개수를 반환한다. 
        vars(class): return __dic__ of class
        dirs(class): return list of names in the current local scope(==class)
    QuerySet
        QuerySet.filter(조건): 조건에 따른 QuerySet 반환, startswith과 같은 검색조건도 설정 가능하다.
            ex: User.filter(name__startswith = "sweet") 
        Get(조건): 조건에 맞는 obj를 반환한다.
            조건: id=1 or pk(primary key)=1 (idx start from 1), name = "sweet House", etc ...
            여러개를 찾을경우 ModelClassName.MultipleObjectsReturned 예외 발생 
            하나도 없을경우 ModelClassName.DoesNotExist 예외 발생 
    참고
        Making Queries Documeny를 보면, data model을 만들면 자동으로 database-abstraction API를 생성해준다. (이것이 objects 함수?)
        파이썬과 같이 변수지정을 할 수 있다. ex: userQuery=User.objects.all()
        Ctrl + L = clear console 
        database가 변경되면, console을 재시작 해야한다? migration이 변경되면인가 database가 변경되면인가?

class가 아닌 특정 조건을 가진 obj 에 대한 code 도 작성이 가능하다? 

여러 model Object가 동일한 기능을 구현해야 한다면, 해당 object를 하나의 admin Class 에 register시키는 것도 좋은 방법이다.
    ex: used_by(self,obj): ret obj.rooms.count() -- 특정 facility가 존재하는 room 갯수, 특정 amenity가 존재하는 room 갯수는 동일한 함수를 통해 구현된다. 


/////////////////////////////////////////////////////////////////////ch8
UserAdmin.list_filter 

어떤 기능이 admin panel 뿐 아니라 모든곳(admin,frontend,console ...)에 있기를 원한다 -> admin.py 가 아닌 model.py에서 정의하면 된다.

list_display에 __str__도 넣을 수 있다 

방의 전체 평점을 구하는 방법
    def total_rating(self):
        all_reviews = self.reviews.all() // 방이 가진 모든 reivew의 QuerySet 반환 
        avg = 0
        for review in all_reviews:
            avg += review.rating_average()
        return avg/len(all_reviews)

django.utils timezone
    django에서 제공하므로 기능호환성이 좋다 
    함수    
        timezone.now().date() : 현재시각 

funcName.boolean = True : admin panel에서 boolean 형식으로 보여준다. 

python ", ".join(arr) : list의 요소를 모두 이은 str 반환, ""안에 있는 것은 list요소 사이사이에 추가한다. 
    즉 여기선 "ele1, ele2, ele3, ele4" 와 같은 str이 반환된다.

-------------------------------------ch9

python manage.py customCommands 
    application - management 폴더 생성 
    __init__.py 생성 
    commands폴더 생성, 내부에 __init.py 생성 
        내부에 customCommand.py 생성 
            from django.core.management.base import BaseCommand
            class Command(BaseCommand):
                help = "description"
                blabla 
                def add_arguments(self, parser):
                    parser.add_argument("--times", help="repeat func")
                def handle(self, *args, **options) // command의 실제 logic, 반드시 구현해야한다.
                    times = options.get("times")
                    for i in range(0,int(times)):
                        //print("i love you")
                        self.stdout.write(self.style.SUCCESS("i love you")) //녹색출력
                        self.stdout.write(self.style.ERROR("i love you")) //적색출력
                        self.stdout.write(self.style.WARNING("i love you")) //주황색출력 

django seed : 가짜 데이터를 만드는데 사용 


Code로 amenitiy등 element를 만드는 법


seed_amenities.py
Command
 help
 handle
-import room_models 
-미리 amenities arr을 만든다.
-For a in amenitiesArr
—Amenity.objects.create(name = a)

Django.seed
 Faker: 스스로 가짜 데이터를 만들어줌
 Install 필요, third party app
 완전 랜덤으로 만들수도 있고, lambda를 통해 만드는 방식을 지정할 수도 있다.
add_arguments: —number이용하자, default설정 가능,type=int 설정하면 입력을 int형식으로 받는다
handle:
-number = options.get(“number”) //—number arg의 갯수를 가져온다
-seeder=seed.seeder() // seed 함수
-seeder.add_entity(User,number, {“is_staff”: False, “is_superuser”:False, …}) // 설정따로 안한것들은 알아서 만들어준다.
-seeder.execute()
//foreingkey도 랜덤으로선택해주지는 않는다, 따로 설정 필요 : lambda 등 이용 가능
//방법 1: user_models.User.objects.all()로 모든 유저 가져와서, import random 후  lambda함수에 random.choice(arr)을 통해 랜덤 선택, 이것은 user의 수가 엄청 많을수도 없으므로 권장되는 방식은 아니다.

Photo random import
미리 파일들을 model폴더에 넣어둔다(ch8참고)


Import할 때 class하나만 import해도 된다

Div0에러 조심, 별점의 평균의 경우 발생할 수 있다, if문을 통해 제외하든, max문을 이용하든 자유

Random.randint(min,max)

fake third party app도 doc가 있다(faker providers.address라고 찾아보자)

django.contrib.admin.utils import flatten
 [[15]] 와 같은것을 15로 만들어준다.

created_photos=seeder.execute()
// seeder.execute()가 무엇을 반환하나? - object의 id(pk)
created_clean = flatten(list(creatrd_photos.values()))
//왜 list로 만들었지?
for pk in created_clean: 
- photo = room=room_models.Room.objects.get(pk=pk)
//생성된 room의 obj id를 가져옴
- for i in range(3.,random.randint(10,15)):
-  -Room_models.Photo.objects.create(
-   -  caption=seeder.faker.sentence()
-   -  room = room
-   -  file = room_photos/{random.randint(1,10)}.webp”

ManyToMany를 faker하는 방법, 사진추가와 똑같은 원리
 For a in amenities
  MaigcNumber=random.randint(1,15)
  If magicNumber % 3 == 0
   Room.amenities.add(a)
//room은 get을 통해 가져온 obj, 위 경우 추가확률은 33%


Seed_ Review

Seed_whatsss 가 비슷한 형식들이라면, 몇몇 이름은 상수화 시켜서 해당 상수만 바꾸면 된다 :  NAME= “review”, 근데 python은 상수가 안겹치나보지?

Array제한
 Arr[3:7]  : 3에서 7까지만

Seed_reservation
Chkin과 chkout시간 관리하자
From datetime import datetime, timedelta
Chkin: datetime.now()
Chkout:datetime.now()+timedelta(days=random.randint(1,4))

9.7의 6분 8초 보면, 배열을 한번에 다 추가할수도 있는듯?

9단원 정리 하고
Challenge하고
8단원하고 정리하고
Code 정리하기
