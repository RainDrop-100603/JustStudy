---1차정리 - 2차정리 - 동영상보며 최종정리---



-----기타-----
동영상 보며 정리할 단원들이 많다. 
ch10까지는 대부분 기능적인 base를 설명하기 위함이고, 실제로 사용하는 방식은 추후 변경될 수 있다.
    예를들면 sql이나 이미지 업로드 
Django queryset은 Lazy하다.
    all=ele.objects.all()를 정의해도, 실제로 사용하기 전까지는 불러오지 않는다.
    따라서 all[:10]은 all에서 10개를 추려내는것이 아니라, 10개만 불러오는 것이다.
div0 에러를 조심하자
THIRD_PARTY_APPS를 등록 안하느 이유:    
    장고에서 사용하는 것이 아니고, 각 앱에서 독립적으로 import되어 사용되기 때문이다.
    등록되는 앱들은 다 django framework에서 사용하는 것들이다.
seeder.execute()로 생성된것은 queryset인가?
    cleaned에서 list()를 추가해야 하는가? 
django에서는 ()을 생략해도 함수라고 쳐 주는가? 
파이썬 super()
    parent class 의 내용을 사용하고 싶을 때 
https://tutorial.djangogirls.org/ko/ 참고, 장고 듀토리얼 
커서 컨트롤 
    "Insert cursor at end of each line selected"
        shift alt i 
        선택한 line들의 끝에 커서를 놔준다. 
    ctrl i : 커서를 모두 왼쪽 끝으로 이동 
-----ch10-----
url response
    urls
        urlpatterns = [path1(url, view), path2(), path3(), ...]
            url의 HttpRequest에 따른 view실행, view에서는 HttpResponse를 보낸다.
        다루는 법
            1. config - urls.py에서 모든 urlpattenrs를 직접 만든다.
            2. 각 applications에 urls.py를 만들고, config - urls.py에서 이를 불러온다.
        urls.py를 각각 다루는 법
            1. cofing - urls에서 app- urls를 include 한다.
                from django.urls import path, include
                urlpatterns=[
                    path("",include("core.urls",namespace="core")),
                    path("movies/",include("movies.urls",namespace="movies")),
                    path("admin/",admin.site.urls),
                ]
            2. 각 applications에 urls.py를 만든다.
                from django.urls import path 
                app_name = "ThisIsNamespace"
                urlpatterns=[
                    path("", views.func1, name = "bla1"),
                    path("p1/", views.func2, name = "bla2"),
                ]
            최종 주소
                config - urls 의 주소에 app - urls의 주소가 합쳐진 형태
                "/movies/", "/movies/p1/"
        namespace and name
            .html에서, 링크를 탈 때, 주소를 하드코딩 하지 않아도 namespace:name을 통해 이동하게 해준다.
            namespace가 있으므로 name이 겹쳐도 된다는 장점이 있다.
            주소가 바뀌더라도 namespace:name이 그대로라면, .html을 수정하지 않아도 된다.
            config - urls에서 namespace도 include하는 것이 필수인지는 모르겠다. 그냥 하자
        기타 팁: 
    view
        HttpRequest가 들어오면 실행되는 함수
        HttpResponse
            HttpRequest에 대한 응답
            하드코딩을 원하면 직접 import하여 사용해도 된다.
                from django.http import HttpResponse
            django에서는 일반적으로 render을 이용한다.
        def viewFunc(request):
            bla~
            return render(request,"bla.html",context={"arg1":var1,"arg2":var2})
        render
            HttpResponse를 포함한 .html을 만들어준다.
            bla.html을 반환한다.
                HttpResponse도 포함? 아직 크게 이해는 안됨 추가바람 
            bla.html에 context={args}를 전달하여 변수로 이용하게 해준다.
        request
            Django는 HttpRequest를 python object로 변환시켜, 첫번째 인자로 준다.
            var(request)를 통해 인자의 내용을 확인 가능하다.
            ?name=var1와 같이, 추가적인 입력또한 모두 여기 있다.
                request.GET.get("name")으로 추출 가능하다.
    template
        django에서 .html 파일들은 templates 폴더에 저장된다.
        경로 설정
            settings.py의 TEMPLATES의 DIRS=[] : templates 폴더의 경로
            일반적으로 가장 상단에 배치된다.
                os.path.join(BASE_DIR,"templates")
                    BASE_DIR의 경로에 "templates" 경로를 합친 듯
        html 
            변수는 {{var}}, 함수는 {% func %} 형식을 통해 이용할 수 있다.
                함수 내부에서는 변수를 그냥 사용해도 된다.
                들여쓰기는 필요없다.
            VSC에서 django를 설치하면 자동완성이 된다.
            구조 팁
                base.html
                partials - folder : base.html의 element를 분리해놓는다.
                app1 - folder : app1의 html들을 저장한다.
                app2 - folder 
        상속과 포함
            상속과 포함을 통해, 요소들을 분리하여 구현할 수 있다.
            base.html 과 partials - folder를 통해 outline을 생성한다.
            extends : 상속
                parent
                    {% block contentsName %} {% endblock %}
                child 
                    {% extends "base.html" %} : 상속 표시
                    {% block contentsName %} contents {% endblock contentsName%}
                        : contentsName에 맞춰 contents를 넣는다.
            include : 포함
                {% include "partials/nav.html" %}
                    : import와 유사하다. 다른 html에 있는 요소를 넣는다.
        함수    
            if : else : endif
            for ~ in : endfor
        아이콘
            &copy

ClassBasedView 
    설명 
        from django.views.generic import bla 
        편하게 볼 수 있는 Doc: https://ccbv.co.uk/
        django에서 미리 구현되어 있는 classView, 상속하여 이용한다. 
            변수를 지정하면 알아서 자료들을 만들어 html에 넘긴다. 
            함수 오버라이딩을 통해, 일부 동작들을 바꿀 수 있다. 
        urlpatterns에서, class.as_view()를 입력해주어야한다. 
            class는 view로서 사용할 수 없기 때문에, 내장된 변환 기능을 사용한다. 
        vs Function Based View 
            FBV는 data를 직접 가공한다. 사용자가 원하는대로 구현 가능하다. 
            CBV는 data가공을 django class가 대신 해준다. 부분적으로 수정 가능하다. 
            어떤것을 쓰든, HTML은 직접 구현해야 한다. 
    종류 
        ListView: model list를 page로 나누어 보여줌
        DetailView: model의 ele들을 보여줌
        CreateView: obj 생성 
        UpdateView: obj를 수정
        DeleteView: obj 제거
        LoginView: login 
        LogoutView: logout 
        FormView: customize 하기 좋다. 
    변수&함수 설명
        model 
            model = models.Room : 다룰 model Class를 지정해준다. 
                html에서 object_list라는 이름으로 들어간다. 
            context_object_name = "Room" : HTML에서의 obj이름을 변경한다. 
            ordering = "created_by" : ordering 
            fields = {"name", } : edit/create 할 element 지정 
            HTML 
                ListView: object_list 
        context
            def get_context_data(self,**kwargs):    //HTML에 보낼 context 수정 
                context=super().get_context_data(**kwargs)  //default context를 불러온다.
                context["now"] = timezone.now() //context의 내용을 수정한다 . 
                return context 
        pagination : ListView 
            paginate_by = 10: 한 page에 들어갈 obj의 갯수를 지정한다.
            paginate_orphans = 3: 마지막 obj가 10+3개 이하면, 한 page에 모두 표현한다.
            HTML 
                page_obj : 현재 page를 다루는 obj 
                page_obj.paginator : 전체 page를 다루는 obj  
        기타 
            template_name : html 경로를 지정해준다. default = appname/classname_CBV.html
                ListView : appname/classname_list.html 
            template_name_suffix : _CBV 부분을 변경해준다. 

QuerySet.order_by 
    ascending: .order_by("ele")
    descending: .order_by("-ele")

HTML 변수 & 함수 
    <a href="{% url "core:homepage" kwarg1 kwarg2 %}"> </a> : namespace:name을 통해 url설정 가능 

URL dispatcher
    kwarg 추가
        urls.py : /<int:year>/ , 형식:이름 으로 받아올 수 있다.
        views.py : FBV에서는 함수를 선언할 때 추가해주어야 하고, CBV에서는 self.kwargs에 저장된다.
        html : {% url "core:homepage" kwarg1 kwarg2 %} , kwarg를 같이 보내야한다. 
        reverse : reverse("namespace:name", kwargs={kwarg1,kwarg2,}), kwarg를 추가한다. 
    models.py 
        get_absolute_url(selif) : 추가바람
    에러 처리 
        FBV : try except 를 이용한 redirect or raise Http404
        CBV : 알아서 처리해줌 
        Http404 : templates/404.html을 통해 꾸밀 수 있다. 강의 12.3 참고
    기타 
        reverse("namespace:name", kwargs={kwarg1,kwarg2,}) : 함수에서 url대신 이용 
            reverse_lazy: class 에서 reverse대신 이용 


Class Based View 
    특징 
        django에서 미리 정의된 Class를 이용하여, 보다 코딩을 쉽게 해준다.
        약간의 커스텀은 가능하나, 자유롭지는 않다.
    종류 
        Generic Edit : Obj를 생성, 수정, 삭제하는 View 
            FormView : 비교적 자유롭다. 
            CreateView, UpdateView,DeleteView  
        Generic Detail : Obj의 element를 다루는 View 
            DetailView
        Generic List : Obj들의 list를 다루는 view, pagiantaion
            ListView

Form과 View 
    What is Form 
        html에서의 form, 즉 입력을 받을 때 사용하는 서식이다. 
            서식을 미리 지정해주면, html에서 해당 서식에 맞게 입력을 받는다 (ex: 이메일 서식)
            html에서는 {{form}} 이라는 형식을 통해 쉽게 표현할 수 있다. 
    forms.py 
        동작 : 입력 받을 필드의 이름과 서식(이메일 등)을 미리 지정해둔다. 
            GET: form 형식에 맞춰서 입력을 만든다. 
                입력을 받고나서, clean_ 함수를 자동으로 실행하여 후처리를 한다. 
            clean_ : 입력에 대한 후처리를 한다. 
                입력을 받은 data는 cleaned_data에 들어가 있다. 후처리를 원한다면 이를 추출하여 처리후 반환한다. 
                clean_var(self)함수는 var에 대한 clean을 수행하고, clean(self)는 여러 var에 대해 복합적으로 수행한다. 
                    clean_var이 clean보다 먼저 실행되는 듯 하다. 
                    cleaned_data.get("var")을 통해 변수를 얻고, 처리한 데이터를 ret을 통해 반환해야 한다. 
                        clean_var은 var만, clean은 cleaned_data 전부를 반환해야 한다. 
                clean함수는, 먼저 정의된 변수들만 사용할 수 있다. 
                    var1, ... var5 순서로 정의되었다면, clean_var3는 var1~3만 이용가능하다. 
                    추측하기로, 모든 입력을 cleaned_data에 넣고 수행하는 것이 아니라, 순서대로 넣으면서 수행하는 듯 하다. 
                    확실하지는 않지만, clean함수는 가장 마지막에 실행되는듯 하다(여러 변수를 처리하기 때문)
                Html form에서 submit해야 전송이 가능하다. 
                    clean에서 error가 발생하면, 브라우저에 invalid하다는 설명이 나오고 submit이 안된다.
                    error가 발생하지 않는다면, submit은 정상적으로 수행된다. 
                    <form method = "post" action = "url"> 과 같은 형식으로 html을 구성하면 된다. 
            save() : view에서 form을 통해 obj를 만들 때 사용한다. 
                상세한 구성은 Form과 ModelForm에서 확인하자  
        Form: 
            입력 서식을 직접 만든다. 
            clean함수 오버라이딩이 가능하다. 
            save함수: 
                obj = models.User.objeces.create_user(username,email,password) 
                    : username, email, password 자리에 각 변수를 넣어서 obj를 만든다. 
                        이때 create_user는 User의 parent의 method이므로, User의 몇몇 변수는 입력이 불가하다. 
                        obj.first_name=self.cleaned_data.get("first_name")과 같은 방식으로 지정해준다. 
                obj.save() : save를 해야 database에 저장된다. 
        ModelForm:
            class Meta: //whatModel.var 들의 입력서식을 자동으로 만들어준다 
                model = whatModel 
                fields = ("var1",...,"varN") 
            clean함수 오버라이딩이 가능하다. 
            save함수: 
                obj=super().save(commit = False) 
                    : class Meta-fields에 있는 서식들로 obj를 만든다. commit은 database에 저장하는지 여부 
                obj.email = self.cleaned_data.get("email")과 같은 방법으로, class Meata에 없는 변수를 입력한다. 
                obj.set_password(self.cleaned_data.get("password"))와 같이 method도 이용 가능하다. 
                    set_password는 obj(즉 class Meta에서 정한 Model)에 존재하는 method 
                obj.save() : obj를 database에 저장한다. 
    views.py 
        동작 : HttpRequest의 GET 혹은 POST요청에 대응하고, template를 rendering해서 반환한다.
            일반적으로 GET은 form을 받아오는 역할, POST는 form을 채워서 반환하는 역할이다.  
        View : 
                GET: get()을 실행한다. form을 포함함 template를 반환하면 된다. 
                POST: form = whatForm(request.POST) 로 form 데이터를 얻을 수 있다.
                    from.is_valid()를 통해 form이 valid한지 확인하고 원하는 작업을 할 수 있다. 
                    form을 처리하고 난 후, 다시 form을 포함한 template를 반환한다? 
                    chg9를 보면 둘다 render(request,"users/login.html",{"form":form}) 반환 
                        추측: post에 대한 HttpResponse를 보내야 하기 때문에 받은것과 같은 형식으로 반환? 
        FormView : GET요청과 POST요청을 자동으로 처리한다. 
                template_name, form_class, success_url을 정의해야 한다. 
                GET: template에 form을 포함하여 반환한다. 
                POST: form데이터를 받아서 form_valid(self,form)을 자동으로 실행한다. 
                    오버라이딩을 통해 원하는 작업을 할 수 있다. 
                    success_url을 반환한다. 