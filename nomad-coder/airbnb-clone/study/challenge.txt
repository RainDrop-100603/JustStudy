chg2 
https://replit.com/@RainDrop97/2ndAssignmentBoilerplate#users/admin.py
https://replit.com/@RainDrop97/DelightfulEvilCamel#.replit

chg3 
https://replit.com/@RainDrop97/3rdAssignmentBoilerplate#.replit
https://replit.com/@RainDrop97/LoathsomeLazyAbility#.replit

타임스탬프 모델을 만들기 위해서 추상 클래스(Abstract base classes)를 이용했습니다. 추상 클래스는 DB 테이블을 만들지 않는 기본 모델 클래스입니다. created_at, updated_at 필드를 가진 추상 클래스(Abstract base classes) Core Model을 만들어서 각각의 모델들이 상속받았습니다. 구체적으로 만드는 방법을 알아보면 python manage.py startapp core커맨드를 이용해서 core 앱을 만들어 줍니다. config 앱의 settings.py 에서 core앱을 등록시킵니다. core 앱의 models.py 에서 추상 클래스인 Core Model을 만들어 줍니다. 내부 클래스인 class Meta에 abstract=True을 설정하면 Core Model은 추상 클래스가 됩니다.
Core Model에서 볼 수 있는 DateField에서 auto_now_add 필드 옵션은 객체가 처음 생성될 때 자동으로 현재 시각이 필드 값이 되도록 합니다. auto_add 필드 옵션은 객체가 저장될 때마다 자동으로 현재 시각이 필드 값이 되도록 합니다. 두 필드 옵션을 이용해서 created_at, updated_at 필드를 만들었습니다.
메타 클래스(class Meta)에서 옵션으로 기본 정렬을 결정하는 ordering, 테이블의 이름을 결정하는 db_table, 사용자를 위한 이름을 결정하는 verbose_name이 있습니다. 더 자세한 옵션들은 메타 클래스 공식 문서를 통해서 확인 할 수 있습니다.
IntegerField는 정수를 저장할 때 사용하는 필드입니다. FloatField는 소수 부분이 있는 float값을 저장하는 필드입니다. ImageField는 이미지 파일을 저장하는 필드입니다. ImageField는 pillow 라이브러리가 필요합니다.
모델들 간에 관계가 다대일인 경우에는 ForeignKey필드를 사용하고 다대다일 때 ManyToManyField필드를 사용합니다. 일대일인 경우 OneToOneField 필드를 사용합니다.
다대일 관계를 나타내는 ForeignKey는 인자로 모델 이름이 필요하고 다음으로 on_delete에 대한 옵션이 필요합니다. on_delete은 ForeignKey필드가 바라보는 객체가 삭제될 때 본 객체를 어떻게 할 것인지 결정합니다. on_delete=models.SET_NULL인 경우 ForeignKey필드가 바라보는 객체가 삭제될 때 본 객체에 null값을 할당합니다. null=True일 경우에만 가능합니다. on_delete=models.CASCADE인 경우 ForeignKey필드가 바라보는 객체가 삭제될 때 본 객체 또한 삭제합니다. OneToOneField에서도 on_delete옵션이 같게 적용됩니다.
ForeignKey필드에 related_name 옵션은 ForeignKey필드가 바라보는 객체에서 본 객체를 역으로 참조할 때 사용하는 이름을 설정합니다. 예를 들어 Book Model에서 category = models.ForeignKey(...생략, related_name="books")필드를 참고해보면 category = Category.objects.get(id = 1)에서 해당 카테고리가 포함하는 모든 책을 알고 싶다면 category.books.all()을 사용해서 알 수 있습니다. ManyToManyField에서 related_name옵션도 같은 역할을 합니다.
다대다 관계면 사용하는 ManyToManyField는 ForeignKey필드와 같이 인자로 모델 이름이 필요합니다. related_name 옵션으로 역참조로 사용할 문자열을 설정합니다. 예를 들면 FavList Model에서 books = models.ManyToManyField("books.Book", related_name="fav_lists")으로 정의했습니다. 일대일 관계를 나타내는 OneToOneField는 ForeignKey필드와 같이 인자로 모델 이름이 필요하고 on_delete 옵션이 있습니다. 예를 들면 FavList Model에서 created_by = models.OneToOneField("users.User", on_delete=models.CASCADE)으로 정의했습니다. 애플리케이션에서 사용자 1명당 하나의 FavList를 만들어 주기 위해서 OneToOneField를 사용했습니다.
저번 챌린지와 마찬가지로 admin.register 데코레이터는 모델 클래스들을 어드민 패널에 등록시키기 위해 Model Admin 클래스를 감싸줍니다. 예를 들면 **@admin** .register(Book) 데코레이터를 사용해서 Book Model이 어드민 패널에 보일 수 있도록 합니다.
저번 챌린지와 마찬가지로 list_display를 이용해서 리스트 페이지에서 보이는 필드를 결정합니다. list_filter를 이용해서 사이드 바에서 보일 필터를 결정합니다.

chg4
https://replit.com/@RainDrop97/LoathsomeLazyAbility-1
https://replit.com/@RainDrop97/JoyfulInsidiousAutomaticvectorization

https://velog.io/@kmnkit/Django-Seed-Faker%EB%A5%BC-%ED%99%9C%EC%9A%A9%ED%95%9C-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EB%A7%8C%EB%93%A4%EA%B8%B0-%EC%B4%9D%EC%A0%95%EB%A6%AC
https://github.com/Brobin/django-seed/blob/master/django_seed/seeder.py

명령어를 만들기 위해서 management/commands폴더를 각각의 앱에 만들어야 합니다. 그리고 commands폴더 안에 seed_x.py파일을 만들어줍니다. seed_x.py파일 안에는 django.core.management.base.BaseCommand를 상속하는 Command클래스를 만들어줘야 합니다.
BaseCommand.help 속성은 명령어에 대한 도움말을 설정합니다. 솔루션 파일에서 명령어 python manage.py seed_books --help를 실행시키면 "This command seeds books"라는 도움말을 볼 수 있습니다. Command클래스의 help속성(Attribute)값이 출력됐습니다.
handle(self, *args, **options)메서드는 명령어의 로직을 처리하는 부분입니다. BaseCommand 클래스의 서브클래스들은 handle 메서드를 반드시 구현해줘야 하고 구현하지 않으면 NotImplementedError가 발생합니다.
add_arguments(self, parser)메서드를 통해서 인자를 추가합니다. parser는 CommandParser객체입니다. CommandParser클래스는 ArgumentParser클래스를 장고에 맞게 변경한 것입니다. ArgumentParser에 대한 자세한 내용은 argparse 공식문서에서 확인할 수 있습니다.
books 앱을 보면 parser.add_argument("--total", help="How many books do you want to create?", default=10)를 통해 --total인자를 추가합니다. help는 python manage.py seed_books --help명령어를 실행시켰을 때 출력되는 도움말입니다. default는 --total인자가 생략시 기본값입니다. handle(self, *args, **options)에서 options['total']로 참조할 수 있습니다.
django_seed는 테스트 DB 만드는 것을 도와줍니다. 테스트 DB를 만들기 위해서 Seed 모듈을 가져오고(import) seeder객체를 생성합니다. 그리고 seeder.add_entity() 메서드를 사용하면 됩니다. seed_books.py를 보면 from django_seed import Seed로 Seed 모듈을 가져옵니다. seeder = Seed.seeder()로 seeder 객체를 생성한 뒤 seeder.add_entity(Book, total, {"year": lambda x: seeder.faker.year(), ... 생략 ... })로 테스트 DB를 생성합니다. add_entity()메서드에 첫 번째 인자는 모델 클래스가 오고 두 번째 인자는 DB의 개수입니다. 세 번째 인자로 직접 만들 필드에 대한 함수를 가진 dict가 옵니다. seeder.execute()를 실행하면 DB에 테스트 케이스들 생성합니다.
handle(self, *args, **options)메서드에서 self.stdout.write()함수를 사용해서 콘솔에 문자열을 출력할 수 있습니다.
seeder = Seed.seeder()는 locale값으로 지역 설정을 할 수 있습니다. locale값의 기본값은 'en_US'입니다. faker 공식문서에서 가능한 locale값들을 찾을 수 있습니다. 참고로 한국 값은 'ko_KR'입니다. Seed.seeder(locale='ko_KR')로 한국에 맞는 값들을 얻을 수 있습니다. 솔루션에서 사용한 seeder.faker.year(), seeder.faker.name(), seeder.faker.sentence()는 'en_US'문서에서 어떤 값을 반환하는지 알 수 있습니다.
Person.objects.filter(kind=Person.KIND_WRITER)은 kind=Person.KIND_WRITER 조건을 만족하는 Person의 QuerySet을 반환합니다. Category.objects.get_or_create(name=genre, kind=Category.KIND_BOOK)은 name=genre, kind=Category.KIND_BOOK 조건을 만족하는 Category DB가 존재하면 존재하는 것을 반환하고 존재하지 않으면 새로 생성하는 메서드입니다. QuerySet 공식문서를 보면 자세한 사항을 확인할 수 있습니다.

chg5
https://replit.com/@RainDrop97/JoyfulInsidiousAutomaticvectorization-1
https://replit.com/@RainDrop97/SecretTightLevel
앱의 URL을 디자인하기 위해서 비공식적으로 URLconf(URL configuration)이라고 불리는 파이썬 모듈을 만듭니다. URLconf은 순수한 파이썬 코드이고 URL 주소와 파이썬 함수들 간의 패턴 매칭입니다.
장고가 URL 주소에 따라 어떻게 파이썬 함수에 매칭시키는지 알아봅시다.
솔루션을 보면 config/settings.py 에서 ROOT_URLCONF=config.urls을 확인하고 config/urls.py을 확인합니다. 장고는 config/urls.py에서 urlpatterns를 찾습니다.
urlpatterns는 django.urls.path() 또는 django.urls.re_path() 을 포함하는 시퀸스(sequence)입니다.
장고는 urlpatterns에서 요청된 URL과 처음으로 일치하는 곳에서 멈춥니다. 그리고 URL에 해당하는 파이썬 함수를 실행시킵니다.
만약에 URL과 일치하는 매칭이 없으면 장고는 에러를 처리합니다.
솔루션에서 /movies URL로 요청한다면 config/urls.py의 urlpatterns에서 /movies URL에 해당하는 path("movies", include("movies.urls", namespace="movies"))에서 멈춥니다.
/movies 로 시작하는 URL에 대해서 movies.urls URLconf모듈을 참고합니다. /movies 뿐만 아니라 /movies/3 같은 /movies로 시작하는 URL은 movies.urls 모듈을 확인합니다.
movies/urls.py에서 urlpatterns을 확인하고 path("", resolve_movies, name="movies") 가 /movies에 해당한다는 것을 알 수 있습니다.
첫 번째 인자로 빈 문자열이 있는데 반복되는 /movies 부분은 생략됐기 때문입니다. 장고는 뷰 함수(view function)인 resolve_movies를 실행시킵니다.
django.urls.path(route, view, kwargs=None, name=None)에 대해서 알아봅시다.
route 인자는 URL 패턴인 문자열입니다. view인자는 실행시킬 파이썬 함수입니다. 뷰 함수(view function), 클래스 기반 뷰(class-based view), django.urls.include 함수가 올 수 있습니다.
kwargs 인자는 뷰 함수에 보내줄 추가 인자 값입니다. name 인자는 URL을 역으로 참조할 수 있게 도와주는 값입니다.
나중에 django.urls.reverse 함수를 사용할 때나 url 템플릿 태그를 사용할 때 name 인자를 어떻게 사용하는지 알 수 있습니다.
URL namespaces에 대한 문서를 확인해주세요.
include를 이용해서 반복되는 URL을 관리할 수 있습니다.
django.urls.include(module, namespace=None) 함수는 다른 URLconf 모듈을 포함하는 함수입니다.
core.urls, movies.urls, books.urls 등과 같이 URLconf 모듈이 첫 번째 인자로 옵니다. namespace는 URL 탐색을 위한 어플리케이션 네임스페이스입니다.
나중에 django.urls.reverse 함수를 사용할 때나 url 템플릿 태그를 사용할 때 namespace를 사용합니다.
static()함수는 디버그 모드에서 파일을 제공하는 URL을 반환하는 도움 함수입니다. config.settings에서 MEDIA_URL과 MEDIA_ROOT 값으로 설정합니다.
views.py에서 로직을 처리하는 파이썬 함수를 정의합니다.
books/views.py 파일을 보면 /books URL에 대해 처리를 하는 함수 resolve_books가 있습니다.
이 함수는 첫 번째 인자로 HttpRequest객체를 받습니다. 그리고 render(request, "books.html")함수를 이용해서 템플릿을 반환합니다.
첫 번째 인자는 request객체이고 두 번째 인자는 템플릿 이름입니다. 장고는 "books.html" 이름의 템플릿을 찾아서 반환합니다.
config/settings.py의 TEMPLATES변수를 통해 어디서 템플릿을 찾을지 알 수 있습니다. DIRS 값이 [os.path.join(BASE_DIR, "templates")]입니다. 장고는 이 값을 읽고 templates폴더에서 템플릿 파일을 찾습니다. 템플릿 파일이 없으면 TemplateDoesNotExist 에러가 발생합니다.

chg6
https://replit.com/@RainDrop97/SecretTightLevel-1
https://replit.com/@RainDrop97/FairTotalMacrolanguage
솔루션에서 / URL로 보낸 HTTP 요청을 처리하기 위해서 core.views.resolve_home() 함수를 사용했습니다.
페이지 값은 URL에 쿼리 파라미터(query parameters)로 입력 받았습니다. 예를 들면 /?page=2 URL은 쿼리 파라미터에 페이지 값이 2가 됩니다.
resolve_home(request)에서 request.GET에서 쿼리 파라미터 값들을 얻을 수 있습니다. page=request.GET.get('page',1)를 통해서 쿼리 파라미터 값을 입력 받았습니다. 쿼리 파라미터에 페이지 값이 없으면 기본값으로 1이 됩니다.
resolve_home() 함수에서 최신 영화 리스트를 보내는 것을 살펴봅시다.
movies = Movie.objects.all().order_by('pk')으로 pk순으로 영화 QuerySet을 얻습니다.
장고에서 제공하는 Paginator클래스를 사용해서 영화 QuerySet에 대한 페이지네이션을 합니다.
Paginator 클래스를 살펴보면 Paginator(object_list, per_page, orphans=0, allow_empty_first_page=True)로 Paginator객체를 만듭니다.
object_list는 필수 인자이고 list, tuple, QuerySet이 입력됩니다. per_page는 필수 인자이고 orphans가 없다면 각 페이지당 최대 개수가 됩니다.
orphans는 적은 자료를 가진 마지막 페이지를 가지고 싶지 않을 때 사용합니다. 솔루션을 보면 Paginator(movies, 10, orphans=5) 입니다. 마지막 페이지에 영화가 5개가 있다면 페이지를 만들지 않고 마지막 페이지에 15개의 영화가 포함됩니다. orphans의 기본값은 0입니다.
allow_empty_first_page는 첫 번째 페이지가 빈 페이지일 수 있는지 결정합니다. 기본값은 True이고 False이면 첫 번째 페이지가 빈 페이지일 때 EmptyPage 에러가 발생합니다.
솔루션에서 movies_paginator = Paginator(movies, 10, orphans=5)로 Paginator객체를 만들어 줬습니다.
Paginator.page()메서드를 사용해서 Page 객체를 만들어 줍니다. 첫 번째 페이지가 1로 시작합니다.
솔루션에서는 movies = movies_paginator.page(int(page)) 로 Page 객체를 얻었습니다. Page.object_list 속성을 통해서 해당 페이지의 아이템을 얻을 수 있습니다.
Page객체는 has_next()메서드가 있어 다음 페이지가 있는지 알려줍니다. 반대로 has_previous() 메서드를 통해 이전 페이지가 있는지 알려줍니다.
책과 인물의 경우에도 영화와 마찬가지로 동일하게 Page 객체를 만들어 줍니다. django.shortcuts.render()함수로 movies, books, people의 Page객체를 템플릿으로 보내줍니다.
templates/home.html이 /URL 페이지의 템플릿입니다.
솔루션에서 장고 내장 템플릿 태그와 필터로 if, for, add를 사용했습니다.
if와 for는 파이썬에서와 같습니다. 다른 점은 {% endif %} 와 {% endfor %}로 끝내줘야 합니다. 또한 템플릿에서 변수를 사용할 때는 {{ }}로 감싸줍니다.
add 필터는 값을 더해줄 때 사용합니다. {{ value|add:"2" }}에서 value=4이면 value의 값은 6이 됩니다. first=[1,2,3] 이고 second=[4,5,6]이면 {{ first|add:second }} 는 [1,2,3,4,5,6]이 됩니다. 내장 템플릿 태그와 필터 공식문서를 보면 더 많은 템플릿 태그와 필터를 알 수 있습니다.

함수 뷰(FBV)를 사용해서 HTTP 요청에 대한 응답을 했습니다. Paginator 클래스를 사용해서 요구되는 페이지의 정보를 Page 객체로 반환했습니다.
django.shortcuts.render() 함수를 통해 템플릿을 보여줬습니다. 템플릿에서 기본적인 태그(if, for)와 필터(add)를 어떻게 사용하는지 알아봤습니다.

int처리 똑바로 안했다. 수정 필요 

chg7
https://replit.com/@RainDrop97/FairTotalMacrolanguage-1
https://replit.com/@RainDrop97/FelineLankyDriver
/페이지는 각각의 섹션이 모든 영화(/movies), 책(/books), 인물(/people)을 보여주는 페이지로 링크가 있어야합니다.
솔루션에서는 링크를 만들기 위해서 url 템플릿 태그를 사용했습니다.
templates/home.html에서 영화 페이지에 대한 링크는 <a href="{% url 'movies:movies' %}">See all movies &rarr;</a> 입니다. urls.py에서 url을 역으로 참조할 수 있도록 네임스페이스를 정의했습니다.
movies/urls.py를 보면 app_name="movies"이 movies:movies 네임스페이스에서 앞의 부분인 애플리케이션 이름입니다.
path("", MoviesView.as_view(), name="movies")에서 name="movies"가 movies:movies 네임스페이스에서 뒤의 부분인 인스턴스 이름입니다.
만약 path("", MoviesView.as_view(), name="index")라면 movies:index로 url을 역으로 참조 할 수 있습니다. 책과 인물에 대한 링크도 동일한 방식으로 만들었습니다.
/ URL의 함수 뷰(FBV)는 저번 챌린지에서 만든 것을 바탕으로 완성시키면 됩니다.
페이지네이션이 필요하지 않으므로 pk 순으로 아이템을 얻고 [:10] 슬라이싱으로 10개의 아이템을 얻었습니다. movies = Movie.objects.all().order_by('pk')[:10]
/movies, /books, /peopleURL은 장고의 클래스 뷰(CBV)를 사용했습니다.
아이템들의 리스트들을 보여주는 것이기 때문에 ListView를 사용하면 됩니다.
/moviesURL을 처리하는 MoviesView클래스는 ListView를 상속받았습니다.
urls.py 에서 path("", MoviesView.as_view(), name="movies")로 MoviesView.as_view()함수로 /movies URL에 대한 요청을 처리합니다.
as_view() 함수는 HTTP 요청의 메서드에 따라 request를 해당하는 함수를 통해 처리한 후 response를 반환합니다.
ListView의 속성에 대해서 알아봅시다.
model속성은 View가 보여줄 데이터 모델을 정합니다.
paginate_by은 페이지 당 아이템의 개수를 나타냅니다.
paginate_by 값이 있다면 장고는 page 값을 URL을 통해 얻어 해당하는 페이지를 반환합니다.
paginate_orphans 은 페이지네이터의 orphans와 같은 역할을 합니다.
ordering은 문자열이거나 문자열의 리스트입니다.
ordere_by()와 동일하게 사용합니다.
MoviesView 내부에서 queryset에 얻을 때 적용됩니다.
context_object_name은 템플릿에 입력되는 context에 아이템 리스트의 키를 정합니다.
context_object_name = "movies"이기 때문에 templates/movie_list.html을 보면 movies 값을 통해서 영화 리스트 정보를 얻고 있습니다.
get_context_data()메서드를 통해서 context에 page_title를 추가했습니다.
super()는 부모 클래스를 통해서 context를 얻습니다. 그리고 page_title를 context에 추가한 뒤 context를 반환했습니다.
super()로 부모 클래스의 메서드를 불러주지 않으면 아이템 리스트 값등이 없으므로 꼭 super()를 해줘야 합니다.
BooksView와 PeopleView도 거의 동일합니다. template_name을 사용해서 템플릿 파일의 이름을 정해준 것만 더 살펴보면 됩니다.
movie_list.html에 맨 위에 {% extends "base.html" %}이 있습니다.
부모 템플릿인 base.html을 바탕으로 확장(extend)한 것입니다.
block을 통해 자식 템플릿에서 내용을 추가합니다. 책과 인물의 경우도 동일합니다.
page_obj은 ListView가 템플릿에 context 을 통해서 보내준 Page객체입니다. 공식문서를 통해서 예시를 확인할 수 있습니다.

chg8 
https://replit.com/@RainDrop97/FelineLankyDriver-1