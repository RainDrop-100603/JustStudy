utility-first css: 여러 요소가 이미 구현되어 있다.

django: 객체지향, class, inheritance 위주

req: python-콘솔에 python 치면 뜸(path설정 필요)
 wsl사용하여 파이썬 설치 가능
	wsl python 검색하여 따라하기
	https://docs.microsoft.com/ko-kr/windows/python/web-frameworks
	가상환경 설정을 해야하나?

Backend
Flask, Pyramid: minimal 
	여러 기능을 직접 만들어야 할 수도 있다.
Django : not minimal
	공통적으로 필요한 부분들은 구현되어 있다.
		관리자패널
		사용자인증
		이메일 백엔드
		보안
		등등 여러가지 기능	
	layout을 강요하는편이다.
		이미 정해진 규격들을 강요한다
	시간이 덜 걸린다.

Frontend
React
	주류
	다양한 상호작용 가능
Django Template
	콘텐츠 위주(상호작용 적다)

사실상 Django 강좌?

Pipenv
	venv(virtualenv 도 비슷한 역할인듯)
pip install Django가 안좋은 사람
두가지설명
1.파이썬에는 공식 패키지관리자가 없다 (nodeJs의 npm과 같은것)
	pip는 관리자 역할을 한다 -> 전역(global)으로 설치함
	파이썬을 위한 npm+ package.json과 같은 것 		
2.pip는 인터넷으로 패키지를 받는 수단 (package installer for python)
	global -> 어디에서나 접근 가능	
	서로 다른버전의 django를 쓰는 프로젝트를 혼용할 수 없다.
즉, pipenv는 python의 패키지관리자를 목적으로 한다.

https://mickael-k.tistory.com/92
https://story-of-jony-the-cold.tistory.com/52
https://nomadcoders.co/airbnb-clone/lectures/852
	댓글확인 
	설치시 python이 아니라 python3를 사용해야하는듯

설치후 pipenv 

리눅스에 대한 공부? 
https://hacktiming.tistory.com/15
https://docs.microsoft.com/ko-kr/windows/wsl/install-win10#step-4---download-the-linux-kernel-update-package
	
설치시 --user 명령어: 시스템파일이 아닌 위치에 설치한다(윈도우로 치면 프로그램 파일, user/.bin위치)
	시스템파일에 설치하면, root권한이 있어야 하므로 바람직하지 않다.
	단, --user로 설치하면 PATH설정이 안되므로, 직접 PATH설정을 해주어야 한다.

Pipenv (혹은 venv도 있다)	
	파이썬 패키지매니저를 목적으로 한다.
	pip를 이용한 설치는 전역적인 반면에(global), pipenv는 지역적이다(bubble, local)
		프로그램 마다 다른 python 버전, django버전이 필요하다면, pipenv가 필요한 것이다.
	사용법
		폴더 생성
		pipenv --three : 폴더로 들어가 bubble 형성, --three로 ptyhon3임을 명시
		pipenv shell : bubble 내부로 진입, 터미널을 나가면 bubble에서도 나가지므로, 새로운 터미널에서 사용할 때마다 pipenv shell을 해주어야 한다.
		프로그램 수행 (ex: pipenv install Django) : Django를 bubble내부에 설치한 것이다. 다른 프로그램도 마찬가지로 수행할 수 있다.

install Django==2.2.5 : Django 설치시 버전을 표시하면 해당 버전을, 표시하지 않으면 최신 버전을 설치한다.

git ignore: 동기화 하지 않을 파일 선택 
	프로젝트 최상단에 위치하여야 한다.

django-admin
	bubble 내부에서 실행한다.
	실행 가능한 명령어들을 보여준다.

django 구조 짜는법
	1. 폴더를 생성한다
	2. django-admin startproject config
	3. config 내부의 파일들을 밖으로 빼준다.(기존 폴더는 이름을 바꿔야 한다.)

vscode python 확장
	좌하단에 버전 선택 가능(pipenv 쓰면 pipenv 입력 )

Linter
	python은 compiled 언어가 아니므로, 에러를 미리 파악할 수 없다.
	linter는 예상되는 에러를 찾아내준다.
	python PEP 이라는, 파이썬 작성규악에 따라 코드를 보기좋게 수정할수도 있다.

https://sosomemo.tistory.com/53
https://webnautes.tistory.com/1158

vscode 관리
	1. .vscode로 모두 관리한다
	2. 언어별로 분리한다
	3. 공부는 통합 / 프로그램은 분리한다. 
	
__init__.py 
	폴더에 이것을 넣어두면, 파이썬이 이 폴더를 import한 것과 같은 역할이다.
	따라서 폴더랑 같은 위치에 있는 다른 파일에서, 폴더내의 파일을 사용할 수 있다.
	ex) : manage.py의 os.environ.setdefault("DJANGO_SETTINGS_MODULE", "config.settings")

settings
	django template에서 제공하는 것들 
	 와 같이 쓸만한 여러 링크 제공
	주석으로 주의사항, 쓸만한 기능들의 링크 제공 
		https://docs.djangoproject.com/en/2.2/ 
		패스워드 검사기 등등 미리 구현된 것들 

Django: python manage.py runserver
	서버 실행
	파일을 저장하면, 서버가 다시 실행됨(새로고침) 
	ctrl + z : 서버종료
	Error: That port is already in use
		서버 종료후 port반환을 제대로 하지 않은것
		sudo lsof -t -i tcp:8000 | xargs kill -9 

서버주소	
	/admin : 관리자 화면
		python manage.py createsuperuser 로 관리자 생성 
python manage.py migrate 후 실행하면 에러도 안뜨고 admin도 잘 작동

sql database
	 여러 종류가 있다.
	첫 행 : 변수이름 = 변수형식 으로 지정. 다음행부터는 변수 형식에 맞도록 입력 
	python manage.py makemigrations
dq.splite3: 데이터베이스

migrate? 2.4절 
	django 는 data models를 확인하고 migration을 생성한다?
	data models - migration - database ? 
	data model을 장고가 사용하는 데이터 유형으로 동기화 하기 위한 migration?
	python manage.py migrate
		데이터를 sql로 migrate
	
function 집합 = 애플리케이션
애플리케이션 집합 = 프로젝트
Airbnb Project
	room Application 
		검색, 생성, 수정, 삭제 func
	예약 App
		예약, 취소 func
	user App
		로그인, 로그아웃, 유저정보 func 
Application은 가능한 한 작은 단위로 만든다.

django-admin startapp ApplicationNames(복수형)
	이때 ApplicationsName은 Django에서 제공하는것과는 이름이 달라야 한다
	이것은 config-settings.py - INSTALLED_APPS에서 확인 가능하다.
	생성된 파일명들은 변경해선 안된다. 그러나 추가로 생성하는것은 자유롭다.
	admins.py : admin에 반영되는 것들
	apps.py : configuartion 파일
	models.py: data, database에 대해 설명한다
	views.py: 사용자에게 보여지는곳, html render하는곳 
	생성후 settings.py에 INSTALLED_APPS에 추가해야 실제로 사용한다.

config
	urls.py: url을 컨트롤, 원칙적으로 url은 여기에서 추가하는 것이다.
	application에 urls.py를 추가하여 간접적으로 할 수 있다.

users application을 만드는 이유
	Django는 admin에서 user정보를 관리할 수 있다.
	그러나 이것은 어디까지나 admin을 위한 것이고 user를 위한것은 아니다.
	그래서 유저가 스스로 자신의 정보를 관리하기 위해 users application을 만든 것
	
framework vs library
	Django framework
		정해진구조에 맞추어 내용을 채워넣는다
	React library
		구조를 직접 자유롭게 만든다.

객체 상속
	상속을 통해 기능을 확장할 수 있다. 예: user의 기능 확장 
	c++에서 배운 상속과 유사하다. 
	Django Documentaion을 통해 방법을 검색할 수 있다.
	class name(상속대상)

vscode settinsg json
	에디터: 사용자 원격 작업영역: 작업영역은 이 vscode 영역, 사용자와 원격은 전역설정과 유사하다고 생각됨
	python path 설정: 이걸 해야지 python.어쩌구가 제대로 실행이 되는듯
	linting과 formatting 설정, 먼저 설치후 설정해야함
	pylint는 flake8과 중복되어 비활성화 

python manage.py makemigrations